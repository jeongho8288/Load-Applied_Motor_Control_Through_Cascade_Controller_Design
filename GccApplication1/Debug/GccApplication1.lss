
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000011fe  00001292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015f  0080010a  0080010a  0000129c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144e  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9a  00000000  00000000  00002876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ade  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  00003df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f7  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007be  00000000  00000000  00004ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005365  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c4       	rjmp	.+2164   	; 0x8b6 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	8b c0       	rjmp	.+278    	; 0x160 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ef       	ldi	r30, 0xFE	; 254
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 30       	cpi	r26, 0x0A	; 10
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	aa e0       	ldi	r26, 0x0A	; 10
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 36       	cpi	r26, 0x69	; 105
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	c6 d4       	rcall	.+2444   	; 0xa50 <main>
      c4:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <SetDutyCW>:
volatile unsigned char g_PacketMode;
volatile unsigned char g_ID = 1;

void SetDutyCW(double v){
	
	while(TCNT1  == 0);
      ca:	2c b5       	in	r18, 0x2c	; 44
      cc:	3d b5       	in	r19, 0x2d	; 45
      ce:	23 2b       	or	r18, r19
      d0:	e1 f3       	breq	.-8      	; 0xca <SetDutyCW>

	int ocr = v * (200. / 24.) + 200;
      d2:	25 e5       	ldi	r18, 0x55	; 85
      d4:	35 e5       	ldi	r19, 0x55	; 85
      d6:	45 e0       	ldi	r20, 0x05	; 5
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	0e 94 9a 08 	call	0x1134	; 0x1134 <__mulsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	48 e4       	ldi	r20, 0x48	; 72
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	6f d6       	rcall	.+3294   	; 0xdc6 <__addsf3>
      e8:	3e d7       	rcall	.+3708   	; 0xf66 <__fixsfsi>
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      ea:	67 38       	cpi	r22, 0x87	; 135
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	78 07       	cpc	r23, r24
      f0:	34 f4       	brge	.+12     	; 0xfe <SetDutyCW+0x34>
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
      f2:	6a 30       	cpi	r22, 0x0A	; 10
      f4:	71 05       	cpc	r23, r1
      f6:	2c f4       	brge	.+10     	; 0x102 <SetDutyCW+0x38>
      f8:	6a e0       	ldi	r22, 0x0A	; 10
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	02 c0       	rjmp	.+4      	; 0x102 <SetDutyCW+0x38>
	
	while(TCNT1  == 0);

	int ocr = v * (200. / 24.) + 200;
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      fe:	66 e8       	ldi	r22, 0x86	; 134
     100:	71 e0       	ldi	r23, 0x01	; 1
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
	//OCR1A = OCR1B = ocr;
	
	OCR1A = OCR3B = ocr + 8;		//1 H
     102:	cb 01       	movw	r24, r22
     104:	08 96       	adiw	r24, 0x08	; 8
     106:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     10a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     10e:	9b bd       	out	0x2b, r25	; 43
     110:	8a bd       	out	0x2a, r24	; 42
	OCR1B = OCR3A = ocr - 8;		//1 L
     112:	68 50       	subi	r22, 0x08	; 8
     114:	71 09       	sbc	r23, r1
     116:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11a:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     11e:	79 bd       	out	0x29, r23	; 41
     120:	68 bd       	out	0x28, r22	; 40
     122:	08 95       	ret

00000124 <InitLS7366>:
}


void InitLS7366(){
     124:	cf 93       	push	r28
	
	PORTB = 0x00;
     126:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_MDR0 | WR_REG);
     128:	88 e8       	ldi	r24, 0x88	; 136
     12a:	42 d6       	rcall	.+3204   	; 0xdb0 <SPI_MasterSend>
	SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX |FILTER_CDF_1);
     12c:	83 e4       	ldi	r24, 0x43	; 67
     12e:	40 d6       	rcall	.+3200   	; 0xdb0 <SPI_MasterSend>
	PORTB = 0x01;
     130:	c1 e0       	ldi	r28, 0x01	; 1
     132:	c8 bb       	out	0x18, r28	; 24
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_MDR1 | WR_REG);
     134:	18 ba       	out	0x18, r1	; 24
     136:	80 e9       	ldi	r24, 0x90	; 144
	SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
     138:	3b d6       	rcall	.+3190   	; 0xdb0 <SPI_MasterSend>
     13a:	80 e0       	ldi	r24, 0x00	; 0
	PORTB = 0x01;
     13c:	39 d6       	rcall	.+3186   	; 0xdb0 <SPI_MasterSend>
	
	PORTB = 0x00;
     13e:	c8 bb       	out	0x18, r28	; 24
	SPI_MasterSend(SELECT_CNTR | CLR_REG);
     140:	18 ba       	out	0x18, r1	; 24
     142:	80 e2       	ldi	r24, 0x20	; 32
     144:	35 d6       	rcall	.+3178   	; 0xdb0 <SPI_MasterSend>
	PORTB = 0x01;
     146:	c8 bb       	out	0x18, r28	; 24
}
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <getADC>:


// 전류센서 값을 ADC로 받아오는 함수
int getADC(char ch){

	ADMUX = (ADMUX & 0xf0) + ch;
     14c:	97 b1       	in	r25, 0x07	; 7
     14e:	90 7f       	andi	r25, 0xF0	; 240
     150:	89 0f       	add	r24, r25
     152:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
     154:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));
     156:	34 9b       	sbis	0x06, 4	; 6
     158:	fe cf       	rjmp	.-4      	; 0x156 <getADC+0xa>
	return ADC;
     15a:	84 b1       	in	r24, 0x04	; 4
     15c:	95 b1       	in	r25, 0x05	; 5
}
     15e:	08 95       	ret

00000160 <__vector_18>:




ISR(USART0_RX_vect){
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	0b b6       	in	r0, 0x3b	; 59
     16c:	0f 92       	push	r0
     16e:	8f 93       	push	r24
     170:	ef 93       	push	r30
     172:	ff 93       	push	r31

	g_buf[g_BufWriteCnt++] = UDR0;
     174:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <g_BufWriteCnt>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	8e 0f       	add	r24, r30
     17c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_BufWriteCnt>
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	8c b1       	in	r24, 0x0c	; 12
     184:	ee 5b       	subi	r30, 0xBE	; 190
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	80 83       	st	Z, r24
}
     18a:	ff 91       	pop	r31
     18c:	ef 91       	pop	r30
     18e:	8f 91       	pop	r24
     190:	0f 90       	pop	r0
     192:	0b be       	out	0x3b, r0	; 59
     194:	0f 90       	pop	r0
     196:	0f be       	out	0x3f, r0	; 63
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <POSITION_CONTROL>:

//0.05s
void POSITION_CONTROL(){ // 위치 제어기
     19e:	8f 92       	push	r8
     1a0:	9f 92       	push	r9
     1a2:	af 92       	push	r10
     1a4:	bf 92       	push	r11
     1a6:	cf 92       	push	r12
     1a8:	df 92       	push	r13
     1aa:	ef 92       	push	r14
     1ac:	ff 92       	push	r15
	// 위치 제어기
	g_Perr = g_Pdes - g_Pcur; // 위치 오차 계산
     1ae:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <g_Pdes>
     1b2:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <g_Pdes+0x1>
     1b6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <g_Pdes+0x2>
     1ba:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <g_Pdes+0x3>
     1be:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <g_Pcur>
     1c2:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <g_Pcur+0x1>
     1c6:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <g_Pcur+0x2>
     1ca:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <g_Pcur+0x3>
     1ce:	fa d5       	rcall	.+3060   	; 0xdc4 <__subsf3>
     1d0:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <g_Perr>
     1d4:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <g_Perr+0x1>
     1d8:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <g_Perr+0x2>
     1dc:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <g_Perr+0x3>
	
	// PD 제어 명령 생성
	g_pos_control = Kpp * g_Perr + Kdp * (g_Perr - g_Perr_prev)/(dt*100.); // Kpp: 위치 Kp, Kpd: 위치 Kd
     1e0:	80 90 32 01 	lds	r8, 0x0132	; 0x800132 <g_Perr>
     1e4:	90 90 33 01 	lds	r9, 0x0133	; 0x800133 <g_Perr+0x1>
     1e8:	a0 90 34 01 	lds	r10, 0x0134	; 0x800134 <g_Perr+0x2>
     1ec:	b0 90 35 01 	lds	r11, 0x0135	; 0x800135 <g_Perr+0x3>
     1f0:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <g_Perr>
     1f4:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <g_Perr+0x1>
     1f8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_Perr+0x2>
     1fc:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <g_Perr+0x3>
     200:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <g_Perr_prev>
     204:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <g_Perr_prev+0x1>
     208:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <g_Perr_prev+0x2>
     20c:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <g_Perr_prev+0x3>
     210:	d9 d5       	rcall	.+2994   	; 0xdc4 <__subsf3>
     212:	2d ec       	ldi	r18, 0xCD	; 205
     214:	3c ec       	ldi	r19, 0xCC	; 204
     216:	4c ec       	ldi	r20, 0xCC	; 204
     218:	5d e3       	ldi	r21, 0x3D	; 61
     21a:	8c d7       	rcall	.+3864   	; 0x1134 <__mulsf3>
     21c:	2d ec       	ldi	r18, 0xCD	; 205
     21e:	3c ec       	ldi	r19, 0xCC	; 204
     220:	4c e4       	ldi	r20, 0x4C	; 76
     222:	5d e3       	ldi	r21, 0x3D	; 61
     224:	38 d6       	rcall	.+3184   	; 0xe96 <__divsf3>
     226:	6b 01       	movw	r12, r22
     228:	7c 01       	movw	r14, r24
     22a:	23 ec       	ldi	r18, 0xC3	; 195
     22c:	35 ef       	ldi	r19, 0xF5	; 245
     22e:	48 e4       	ldi	r20, 0x48	; 72
     230:	51 e4       	ldi	r21, 0x41	; 65
     232:	c5 01       	movw	r24, r10
     234:	b4 01       	movw	r22, r8
     236:	7e d7       	rcall	.+3836   	; 0x1134 <__mulsf3>
     238:	9b 01       	movw	r18, r22
     23a:	ac 01       	movw	r20, r24
     23c:	c7 01       	movw	r24, r14
     23e:	b6 01       	movw	r22, r12
     240:	c2 d5       	rcall	.+2948   	; 0xdc6 <__addsf3>
     242:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
     246:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
     24a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
     24e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
	// D-term을 위한 오차 저장
	g_Perr_prev = g_Perr;
     252:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_Perr>
     256:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <g_Perr+0x1>
     25a:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <g_Perr+0x2>
     25e:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <g_Perr+0x3>
     262:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <g_Perr_prev>
     266:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <g_Perr_prev+0x1>
     26a:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <g_Perr_prev+0x2>
     26e:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <g_Perr_prev+0x3>
	
	//속도제한
	if(g_pos_control >= g_Vlimit)
     272:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
     276:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
     27a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
     27e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
     282:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <g_Vlimit>
     286:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <g_Vlimit+0x1>
     28a:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <g_Vlimit+0x2>
     28e:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <g_Vlimit+0x3>
     292:	4c d7       	rcall	.+3736   	; 0x112c <__gesf2>
     294:	88 23       	and	r24, r24
     296:	8c f0       	brlt	.+34     	; 0x2ba <POSITION_CONTROL+0x11c>
	{
		g_pos_control = g_Vlimit;
     298:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_Vlimit>
     29c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_Vlimit+0x1>
     2a0:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <g_Vlimit+0x2>
     2a4:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <g_Vlimit+0x3>
     2a8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     2ac:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     2b0:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
     2b4:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
     2b8:	27 c0       	rjmp	.+78     	; 0x308 <POSITION_CONTROL+0x16a>
	}
	else if(g_pos_control <= -g_Vlimit)
     2ba:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_Vlimit>
     2be:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_Vlimit+0x1>
     2c2:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <g_Vlimit+0x2>
     2c6:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <g_Vlimit+0x3>
     2ca:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
     2ce:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
     2d2:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <__data_end+0x2>
     2d6:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <__data_end+0x3>
     2da:	bc 01       	movw	r22, r24
     2dc:	cd 01       	movw	r24, r26
     2de:	90 58       	subi	r25, 0x80	; 128
     2e0:	25 d7       	rcall	.+3658   	; 0x112c <__gesf2>
     2e2:	88 23       	and	r24, r24
     2e4:	8c f0       	brlt	.+34     	; 0x308 <POSITION_CONTROL+0x16a>
	{
		g_pos_control = -g_Vlimit;
     2e6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_Vlimit>
     2ea:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_Vlimit+0x1>
     2ee:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <g_Vlimit+0x2>
     2f2:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <g_Vlimit+0x3>
     2f6:	b0 58       	subi	r27, 0x80	; 128
     2f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     2fc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     300:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
     304:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	}

	if(g_Vlimit > 6140.*M_PI/30.)
     308:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <g_Vlimit>
     30c:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <g_Vlimit+0x1>
     310:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_Vlimit+0x2>
     314:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_Vlimit+0x3>
     318:	2d ea       	ldi	r18, 0xAD	; 173
     31a:	3e eb       	ldi	r19, 0xBE	; 190
     31c:	40 e2       	ldi	r20, 0x20	; 32
     31e:	54 e4       	ldi	r21, 0x44	; 68
     320:	05 d7       	rcall	.+3594   	; 0x112c <__gesf2>
     322:	18 16       	cp	r1, r24
     324:	6c f4       	brge	.+26     	; 0x340 <POSITION_CONTROL+0x1a2>
	{
		g_Vlimit = (double)6140.*M_PI/30.;
     326:	8d ea       	ldi	r24, 0xAD	; 173
     328:	9e eb       	ldi	r25, 0xBE	; 190
     32a:	a0 e2       	ldi	r26, 0x20	; 32
     32c:	b4 e4       	ldi	r27, 0x44	; 68
     32e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_Vlimit>
     332:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <g_Vlimit+0x1>
     336:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <g_Vlimit+0x2>
     33a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <g_Vlimit+0x3>
     33e:	1b c0       	rjmp	.+54     	; 0x376 <POSITION_CONTROL+0x1d8>
	}
	else if(g_Vlimit < -6140.*M_PI/30.)
     340:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <g_Vlimit>
     344:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <g_Vlimit+0x1>
     348:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_Vlimit+0x2>
     34c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_Vlimit+0x3>
     350:	2d ea       	ldi	r18, 0xAD	; 173
     352:	3e eb       	ldi	r19, 0xBE	; 190
     354:	40 e2       	ldi	r20, 0x20	; 32
     356:	54 ec       	ldi	r21, 0xC4	; 196
     358:	9a d5       	rcall	.+2868   	; 0xe8e <__cmpsf2>
     35a:	88 23       	and	r24, r24
     35c:	64 f4       	brge	.+24     	; 0x376 <POSITION_CONTROL+0x1d8>
	{
		g_Vlimit = (double)-6140.*M_PI/30.;
     35e:	8d ea       	ldi	r24, 0xAD	; 173
     360:	9e eb       	ldi	r25, 0xBE	; 190
     362:	a0 e2       	ldi	r26, 0x20	; 32
     364:	b4 ec       	ldi	r27, 0xC4	; 196
     366:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_Vlimit>
     36a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <g_Vlimit+0x1>
     36e:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <g_Vlimit+0x2>
     372:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <g_Vlimit+0x3>
	}
}
     376:	ff 90       	pop	r15
     378:	ef 90       	pop	r14
     37a:	df 90       	pop	r13
     37c:	cf 90       	pop	r12
     37e:	bf 90       	pop	r11
     380:	af 90       	pop	r10
     382:	9f 90       	pop	r9
     384:	8f 90       	pop	r8
     386:	08 95       	ret

00000388 <VELOCITY_CONTROL>:

//0.005s
void VELOCITY_CONTROL(){ // 속도 제어기
     388:	8f 92       	push	r8
     38a:	9f 92       	push	r9
     38c:	af 92       	push	r10
     38e:	bf 92       	push	r11
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
	g_Vcur = (double)(g_Pcur - g_Pre_Pcur) / (dt*10.);
     398:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <g_Pcur>
     39c:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <g_Pcur+0x1>
     3a0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <g_Pcur+0x2>
     3a4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <g_Pcur+0x3>
     3a8:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <g_Pre_Pcur>
     3ac:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <g_Pre_Pcur+0x1>
     3b0:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <g_Pre_Pcur+0x2>
     3b4:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <g_Pre_Pcur+0x3>
     3b8:	05 d5       	rcall	.+2570   	; 0xdc4 <__subsf3>
     3ba:	2b e0       	ldi	r18, 0x0B	; 11
     3bc:	37 ed       	ldi	r19, 0xD7	; 215
     3be:	43 ea       	ldi	r20, 0xA3	; 163
     3c0:	5b e3       	ldi	r21, 0x3B	; 59
     3c2:	69 d5       	rcall	.+2770   	; 0xe96 <__divsf3>
     3c4:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <g_Vcur>
     3c8:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <g_Vcur+0x1>
     3cc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_Vcur+0x2>
     3d0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_Vcur+0x3>
	g_Pre_Pcur = (double)g_Pcur;
     3d4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <g_Pcur>
     3d8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <g_Pcur+0x1>
     3dc:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <g_Pcur+0x2>
     3e0:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <g_Pcur+0x3>
     3e4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <g_Pre_Pcur>
     3e8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <g_Pre_Pcur+0x1>
     3ec:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <g_Pre_Pcur+0x2>
     3f0:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <g_Pre_Pcur+0x3>
	
	// 속도 제어기
	g_Verr = (double)(g_pos_control - g_Vcur); // 속도 오차 계산
     3f4:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
     3f8:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
     3fc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
     400:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
     404:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <g_Vcur>
     408:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <g_Vcur+0x1>
     40c:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <g_Vcur+0x2>
     410:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <g_Vcur+0x3>
     414:	d7 d4       	rcall	.+2478   	; 0xdc4 <__subsf3>
     416:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <g_Verr>
     41a:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <g_Verr+0x1>
     41e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_Verr+0x2>
     422:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_Verr+0x3>
	
	// 속도 제어 명령 생성 (PI 제어기)
	g_vel_control = (double)(Kpv * g_Verr + Kiv * g_Verr_sum * (dt*10.));
     426:	80 90 26 01 	lds	r8, 0x0126	; 0x800126 <g_Verr>
     42a:	90 90 27 01 	lds	r9, 0x0127	; 0x800127 <g_Verr+0x1>
     42e:	a0 90 28 01 	lds	r10, 0x0128	; 0x800128 <g_Verr+0x2>
     432:	b0 90 29 01 	lds	r11, 0x0129	; 0x800129 <g_Verr+0x3>
     436:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <g_Verr_sum>
     43a:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <g_Verr_sum+0x1>
     43e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_Verr_sum+0x2>
     442:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <g_Verr_sum+0x3>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	40 e2       	ldi	r20, 0x20	; 32
     44c:	52 e4       	ldi	r21, 0x42	; 66
     44e:	72 d6       	rcall	.+3300   	; 0x1134 <__mulsf3>
     450:	2b e0       	ldi	r18, 0x0B	; 11
     452:	37 ed       	ldi	r19, 0xD7	; 215
     454:	43 ea       	ldi	r20, 0xA3	; 163
     456:	5b e3       	ldi	r21, 0x3B	; 59
     458:	6d d6       	rcall	.+3290   	; 0x1134 <__mulsf3>
     45a:	6b 01       	movw	r12, r22
     45c:	7c 01       	movw	r14, r24
     45e:	24 e1       	ldi	r18, 0x14	; 20
     460:	3e ea       	ldi	r19, 0xAE	; 174
     462:	47 e2       	ldi	r20, 0x27	; 39
     464:	50 e4       	ldi	r21, 0x40	; 64
     466:	c5 01       	movw	r24, r10
     468:	b4 01       	movw	r22, r8
     46a:	64 d6       	rcall	.+3272   	; 0x1134 <__mulsf3>
     46c:	9b 01       	movw	r18, r22
     46e:	ac 01       	movw	r20, r24
     470:	c7 01       	movw	r24, r14
     472:	b6 01       	movw	r22, r12
     474:	a8 d4       	rcall	.+2384   	; 0xdc6 <__addsf3>
     476:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <g_vel_control>
     47a:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <g_vel_control+0x1>
     47e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_vel_control+0x2>
     482:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_vel_control+0x3>
	g_Verr_sum += (double)g_Verr; // I-term 누적
     486:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <g_Verr>
     48a:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <g_Verr+0x1>
     48e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_Verr+0x2>
     492:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_Verr+0x3>
     496:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <g_Verr_sum>
     49a:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <g_Verr_sum+0x1>
     49e:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <g_Verr_sum+0x2>
     4a2:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <g_Verr_sum+0x3>
     4a6:	8f d4       	rcall	.+2334   	; 0xdc6 <__addsf3>
     4a8:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <g_Verr_sum>
     4ac:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <g_Verr_sum+0x1>
     4b0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_Verr_sum+0x2>
     4b4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <g_Verr_sum+0x3>

	// I-term anti-windup (속도 제어 명령 제한)
	if(g_vel_control >= g_Climit)
     4b8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_vel_control>
     4bc:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <g_vel_control+0x1>
     4c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_vel_control+0x2>
     4c4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_vel_control+0x3>
     4c8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <g_Climit>
     4cc:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <g_Climit+0x1>
     4d0:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <g_Climit+0x2>
     4d4:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <g_Climit+0x3>
     4d8:	29 d6       	rcall	.+3154   	; 0x112c <__gesf2>
     4da:	88 23       	and	r24, r24
     4dc:	0c f4       	brge	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4de:	3c c0       	rjmp	.+120    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
	{
		g_Verr_sum -= (double)(g_vel_control - g_Climit)*Kav;
     4e0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_vel_control>
     4e4:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <g_vel_control+0x1>
     4e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_vel_control+0x2>
     4ec:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_vel_control+0x3>
     4f0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <g_Climit>
     4f4:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <g_Climit+0x1>
     4f8:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <g_Climit+0x2>
     4fc:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <g_Climit+0x3>
     500:	c0 90 22 01 	lds	r12, 0x0122	; 0x800122 <g_Verr_sum>
     504:	d0 90 23 01 	lds	r13, 0x0123	; 0x800123 <g_Verr_sum+0x1>
     508:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <g_Verr_sum+0x2>
     50c:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <g_Verr_sum+0x3>
     510:	59 d4       	rcall	.+2226   	; 0xdc4 <__subsf3>
     512:	2f e6       	ldi	r18, 0x6F	; 111
     514:	32 e1       	ldi	r19, 0x12	; 18
     516:	43 ec       	ldi	r20, 0xC3	; 195
     518:	5e e3       	ldi	r21, 0x3E	; 62
     51a:	0c d6       	rcall	.+3096   	; 0x1134 <__mulsf3>
     51c:	9b 01       	movw	r18, r22
     51e:	ac 01       	movw	r20, r24
     520:	c7 01       	movw	r24, r14
     522:	b6 01       	movw	r22, r12
     524:	4f d4       	rcall	.+2206   	; 0xdc4 <__subsf3>
     526:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <g_Verr_sum>
     52a:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <g_Verr_sum+0x1>
     52e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_Verr_sum+0x2>
     532:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <g_Verr_sum+0x3>
		g_vel_control = g_Climit;
     536:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <g_Climit>
     53a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <g_Climit+0x1>
     53e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <g_Climit+0x2>
     542:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <g_Climit+0x3>
     546:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_vel_control>
     54a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_vel_control+0x1>
     54e:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <g_vel_control+0x2>
     552:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <g_vel_control+0x3>
     556:	53 c0       	rjmp	.+166    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
	}
	else if(g_vel_control <= -g_Climit)
     558:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <g_Climit>
     55c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <g_Climit+0x1>
     560:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <g_Climit+0x2>
     564:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <g_Climit+0x3>
     568:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <g_vel_control>
     56c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <g_vel_control+0x1>
     570:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <g_vel_control+0x2>
     574:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <g_vel_control+0x3>
     578:	bc 01       	movw	r22, r24
     57a:	cd 01       	movw	r24, r26
     57c:	90 58       	subi	r25, 0x80	; 128
     57e:	d6 d5       	rcall	.+2988   	; 0x112c <__gesf2>
     580:	88 23       	and	r24, r24
     582:	0c f4       	brge	.+2      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     584:	3c c0       	rjmp	.+120    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
	{
		g_Verr_sum -= (double)(g_vel_control + g_Climit)*Kav;
     586:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_vel_control>
     58a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <g_vel_control+0x1>
     58e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_vel_control+0x2>
     592:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_vel_control+0x3>
     596:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <g_Climit>
     59a:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <g_Climit+0x1>
     59e:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <g_Climit+0x2>
     5a2:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <g_Climit+0x3>
     5a6:	c0 90 22 01 	lds	r12, 0x0122	; 0x800122 <g_Verr_sum>
     5aa:	d0 90 23 01 	lds	r13, 0x0123	; 0x800123 <g_Verr_sum+0x1>
     5ae:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <g_Verr_sum+0x2>
     5b2:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <g_Verr_sum+0x3>
     5b6:	07 d4       	rcall	.+2062   	; 0xdc6 <__addsf3>
     5b8:	2f e6       	ldi	r18, 0x6F	; 111
     5ba:	32 e1       	ldi	r19, 0x12	; 18
     5bc:	43 ec       	ldi	r20, 0xC3	; 195
     5be:	5e e3       	ldi	r21, 0x3E	; 62
     5c0:	b9 d5       	rcall	.+2930   	; 0x1134 <__mulsf3>
     5c2:	9b 01       	movw	r18, r22
     5c4:	ac 01       	movw	r20, r24
     5c6:	c7 01       	movw	r24, r14
     5c8:	b6 01       	movw	r22, r12
     5ca:	fc d3       	rcall	.+2040   	; 0xdc4 <__subsf3>
     5cc:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <g_Verr_sum>
     5d0:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <g_Verr_sum+0x1>
     5d4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_Verr_sum+0x2>
     5d8:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <g_Verr_sum+0x3>
		g_vel_control = -g_Climit;
     5dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <g_Climit>
     5e0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <g_Climit+0x1>
     5e4:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <g_Climit+0x2>
     5e8:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <g_Climit+0x3>
     5ec:	b0 58       	subi	r27, 0x80	; 128
     5ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_vel_control>
     5f2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_vel_control+0x1>
     5f6:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <g_vel_control+0x2>
     5fa:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <g_vel_control+0x3>
	}
	
	if(g_Climit > 2.08)																																																																														
     5fe:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <g_Climit>
     602:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <g_Climit+0x1>
     606:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <g_Climit+0x2>
     60a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <g_Climit+0x3>
     60e:	28 eb       	ldi	r18, 0xB8	; 184
     610:	3e e1       	ldi	r19, 0x1E	; 30
     612:	45 e0       	ldi	r20, 0x05	; 5
     614:	50 e4       	ldi	r21, 0x40	; 64
     616:	8a d5       	rcall	.+2836   	; 0x112c <__gesf2>
     618:	18 16       	cp	r1, r24
     61a:	6c f4       	brge	.+26     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
	{
		g_Climit = 2.08;
     61c:	88 eb       	ldi	r24, 0xB8	; 184
     61e:	9e e1       	ldi	r25, 0x1E	; 30
     620:	a5 e0       	ldi	r26, 0x05	; 5
     622:	b0 e4       	ldi	r27, 0x40	; 64
     624:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <g_Climit>
     628:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <g_Climit+0x1>
     62c:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <g_Climit+0x2>
     630:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <g_Climit+0x3>
	}
	else if(g_Climit < -2.08)
     634:	1b c0       	rjmp	.+54     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     636:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <g_Climit>
     63a:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <g_Climit+0x1>
     63e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <g_Climit+0x2>
     642:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <g_Climit+0x3>
     646:	28 eb       	ldi	r18, 0xB8	; 184
     648:	3e e1       	ldi	r19, 0x1E	; 30
     64a:	45 e0       	ldi	r20, 0x05	; 5
     64c:	50 ec       	ldi	r21, 0xC0	; 192
     64e:	1f d4       	rcall	.+2110   	; 0xe8e <__cmpsf2>
     650:	88 23       	and	r24, r24
     652:	64 f4       	brge	.+24     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
	{
		g_Climit = -2.08;
     654:	88 eb       	ldi	r24, 0xB8	; 184
     656:	9e e1       	ldi	r25, 0x1E	; 30
     658:	a5 e0       	ldi	r26, 0x05	; 5
     65a:	b0 ec       	ldi	r27, 0xC0	; 192
     65c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <g_Climit>
     660:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <g_Climit+0x1>
     664:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <g_Climit+0x2>
     668:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <g_Climit+0x3>
	}
}
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	9f 90       	pop	r9
     67a:	8f 90       	pop	r8
     67c:	08 95       	ret

0000067e <CURRENT_CONTROL>:

//0.0005s
void CURRENT_CONTROL(){ //전류 제어기
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
	//전류 센서를 통하여 받아온 센서값을 고유 계산식을 이용하여 현재 전류값 계산
	g_Ccur = -( ((g_ADC / 1024. * 5.) - 2.5) * 10.);
     692:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <g_ADC>
     696:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <g_ADC+0x1>
     69a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <g_ADC+0x2>
     69e:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <g_ADC+0x3>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e8       	ldi	r20, 0x80	; 128
     6a8:	5a e3       	ldi	r21, 0x3A	; 58
     6aa:	44 d5       	rcall	.+2696   	; 0x1134 <__mulsf3>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 ea       	ldi	r20, 0xA0	; 160
     6b2:	50 e4       	ldi	r21, 0x40	; 64
     6b4:	3f d5       	rcall	.+2686   	; 0x1134 <__mulsf3>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e2       	ldi	r20, 0x20	; 32
     6bc:	50 e4       	ldi	r21, 0x40	; 64
     6be:	82 d3       	rcall	.+1796   	; 0xdc4 <__subsf3>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e2       	ldi	r20, 0x20	; 32
     6c6:	51 e4       	ldi	r21, 0x41	; 65
     6c8:	35 d5       	rcall	.+2666   	; 0x1134 <__mulsf3>
     6ca:	dc 01       	movw	r26, r24
     6cc:	cb 01       	movw	r24, r22
     6ce:	b0 58       	subi	r27, 0x80	; 128
     6d0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_Ccur>
     6d4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_Ccur+0x1>
     6d8:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <g_Ccur+0x2>
     6dc:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <g_Ccur+0x3>
	g_Cerr = (double)(g_vel_control - g_Ccur);
     6e0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_vel_control>
     6e4:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <g_vel_control+0x1>
     6e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_vel_control+0x2>
     6ec:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_vel_control+0x3>
     6f0:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_Ccur>
     6f4:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_Ccur+0x1>
     6f8:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <g_Ccur+0x2>
     6fc:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <g_Ccur+0x3>
     700:	61 d3       	rcall	.+1730   	; 0xdc4 <__subsf3>
     702:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <g_Cerr>
     706:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <g_Cerr+0x1>
     70a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_Cerr+0x2>
     70e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_Cerr+0x3>

	//cur_control = g_Cerr * 0.1 + g_Cerr_sum * 1.5; // PI 제어기 // 0.1 - Kp gain, 1.5 - Ki gain // 임의의 gain 값 수정해야함
	cur_control = (double)(g_Cerr * Kpc + g_Cerr_sum * Kdp); 
     712:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <g_Cerr>
     716:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <g_Cerr+0x1>
     71a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_Cerr+0x2>
     71e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <g_Cerr+0x3>
     722:	80 90 16 01 	lds	r8, 0x0116	; 0x800116 <g_Cerr_sum>
     726:	90 90 17 01 	lds	r9, 0x0117	; 0x800117 <g_Cerr_sum+0x1>
     72a:	a0 90 18 01 	lds	r10, 0x0118	; 0x800118 <g_Cerr_sum+0x2>
     72e:	b0 90 19 01 	lds	r11, 0x0119	; 0x800119 <g_Cerr_sum+0x3>
     732:	26 e4       	ldi	r18, 0x46	; 70
     734:	36 eb       	ldi	r19, 0xB6	; 182
     736:	43 e5       	ldi	r20, 0x53	; 83
     738:	5f e3       	ldi	r21, 0x3F	; 63
     73a:	fc d4       	rcall	.+2552   	; 0x1134 <__mulsf3>
     73c:	6b 01       	movw	r12, r22
     73e:	7c 01       	movw	r14, r24
     740:	2d ec       	ldi	r18, 0xCD	; 205
     742:	3c ec       	ldi	r19, 0xCC	; 204
     744:	4c ec       	ldi	r20, 0xCC	; 204
     746:	5d e3       	ldi	r21, 0x3D	; 61
     748:	c5 01       	movw	r24, r10
     74a:	b4 01       	movw	r22, r8
     74c:	f3 d4       	rcall	.+2534   	; 0x1134 <__mulsf3>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	c7 01       	movw	r24, r14
     754:	b6 01       	movw	r22, r12
     756:	37 d3       	rcall	.+1646   	; 0xdc6 <__addsf3>
     758:	06 d4       	rcall	.+2060   	; 0xf66 <__fixsfsi>
     75a:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <cur_control+0x1>
     75e:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <cur_control>
	cur_control += (double)g_Vcur * Kt; // 전향보상해주는 코드
     762:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_Vcur>
     766:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_Vcur+0x1>
     76a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_Vcur+0x2>
     76e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_Vcur+0x3>
     772:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <cur_control>
     776:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <cur_control+0x1>
     77a:	2f ed       	ldi	r18, 0xDF	; 223
     77c:	30 ee       	ldi	r19, 0xE0	; 224
     77e:	4b e8       	ldi	r20, 0x8B	; 139
     780:	5d e3       	ldi	r21, 0x3D	; 61
     782:	d8 d4       	rcall	.+2480   	; 0x1134 <__mulsf3>
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
     788:	be 01       	movw	r22, r28
     78a:	dd 0f       	add	r29, r29
     78c:	88 0b       	sbc	r24, r24
     78e:	99 0b       	sbc	r25, r25
     790:	1d d4       	rcall	.+2106   	; 0xfcc <__floatsisf>
     792:	9b 01       	movw	r18, r22
     794:	ac 01       	movw	r20, r24
     796:	c7 01       	movw	r24, r14
     798:	b6 01       	movw	r22, r12
     79a:	15 d3       	rcall	.+1578   	; 0xdc6 <__addsf3>
     79c:	e4 d3       	rcall	.+1992   	; 0xf66 <__fixsfsi>
     79e:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <cur_control+0x1>
     7a2:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <cur_control>
	
	g_Cerr_sum += (double)g_Cerr;
     7a6:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <g_Cerr>
     7aa:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <g_Cerr+0x1>
     7ae:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_Cerr+0x2>
     7b2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <g_Cerr+0x3>
     7b6:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <g_Cerr_sum>
     7ba:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <g_Cerr_sum+0x1>
     7be:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <g_Cerr_sum+0x2>
     7c2:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <g_Cerr_sum+0x3>
     7c6:	ff d2       	rcall	.+1534   	; 0xdc6 <__addsf3>
     7c8:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <g_Cerr_sum>
     7cc:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <g_Cerr_sum+0x1>
     7d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_Cerr_sum+0x2>
     7d4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_Cerr_sum+0x3>
	
	//I-term anti ([-24[v]~24[v]]
	if(cur_control >= 24){
     7d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cur_control>
     7dc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_control+0x1>
     7e0:	48 97       	sbiw	r24, 0x18	; 24
     7e2:	64 f1       	brlt	.+88     	; 0x83c <CURRENT_CONTROL+0x1be>
		g_Cerr_sum -= (double)(cur_control - 24) * 1. / Kpc; // (1/Kpc = Kac)
     7e4:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <cur_control>
     7e8:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <cur_control+0x1>
     7ec:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <g_Cerr_sum>
     7f0:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <g_Cerr_sum+0x1>
     7f4:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <g_Cerr_sum+0x2>
     7f8:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <g_Cerr_sum+0x3>
     7fc:	68 51       	subi	r22, 0x18	; 24
     7fe:	71 09       	sbc	r23, r1
     800:	07 2e       	mov	r0, r23
     802:	00 0c       	add	r0, r0
     804:	88 0b       	sbc	r24, r24
     806:	99 0b       	sbc	r25, r25
     808:	e1 d3       	rcall	.+1986   	; 0xfcc <__floatsisf>
     80a:	26 e4       	ldi	r18, 0x46	; 70
     80c:	36 eb       	ldi	r19, 0xB6	; 182
     80e:	43 e5       	ldi	r20, 0x53	; 83
     810:	5f e3       	ldi	r21, 0x3F	; 63
     812:	41 d3       	rcall	.+1666   	; 0xe96 <__divsf3>
     814:	9b 01       	movw	r18, r22
     816:	ac 01       	movw	r20, r24
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	d3 d2       	rcall	.+1446   	; 0xdc4 <__subsf3>
     81e:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <g_Cerr_sum>
     822:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <g_Cerr_sum+0x1>
     826:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_Cerr_sum+0x2>
     82a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_Cerr_sum+0x3>
		cur_control = 24.;
     82e:	88 e1       	ldi	r24, 0x18	; 24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cur_control+0x1>
     836:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <cur_control>
     83a:	32 c0       	rjmp	.+100    	; 0x8a0 <CURRENT_CONTROL+0x222>
	}
	else if(cur_control <= -24){
     83c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cur_control>
     840:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_control+0x1>
     844:	89 3e       	cpi	r24, 0xE9	; 233
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	5c f5       	brge	.+86     	; 0x8a0 <CURRENT_CONTROL+0x222>
		g_Cerr_sum -= (double)(cur_control + 24) * 1. / Kpc; // (1/Kpc = Kac)
     84a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <cur_control>
     84e:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <cur_control+0x1>
     852:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <g_Cerr_sum>
     856:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <g_Cerr_sum+0x1>
     85a:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <g_Cerr_sum+0x2>
     85e:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <g_Cerr_sum+0x3>
     862:	68 5e       	subi	r22, 0xE8	; 232
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	07 2e       	mov	r0, r23
     868:	00 0c       	add	r0, r0
     86a:	88 0b       	sbc	r24, r24
     86c:	99 0b       	sbc	r25, r25
     86e:	ae d3       	rcall	.+1884   	; 0xfcc <__floatsisf>
     870:	26 e4       	ldi	r18, 0x46	; 70
     872:	36 eb       	ldi	r19, 0xB6	; 182
     874:	43 e5       	ldi	r20, 0x53	; 83
     876:	5f e3       	ldi	r21, 0x3F	; 63
     878:	0e d3       	rcall	.+1564   	; 0xe96 <__divsf3>
     87a:	9b 01       	movw	r18, r22
     87c:	ac 01       	movw	r20, r24
     87e:	c7 01       	movw	r24, r14
     880:	b6 01       	movw	r22, r12
     882:	a0 d2       	rcall	.+1344   	; 0xdc4 <__subsf3>
     884:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <g_Cerr_sum>
     888:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <g_Cerr_sum+0x1>
     88c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_Cerr_sum+0x2>
     890:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_Cerr_sum+0x3>
		cur_control = -24.;
     894:	88 ee       	ldi	r24, 0xE8	; 232
     896:	9f ef       	ldi	r25, 0xFF	; 255
     898:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cur_control+0x1>
     89c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <cur_control>
	}
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	df 90       	pop	r13
     8aa:	cf 90       	pop	r12
     8ac:	bf 90       	pop	r11
     8ae:	af 90       	pop	r10
     8b0:	9f 90       	pop	r9
     8b2:	8f 90       	pop	r8
     8b4:	08 95       	ret

000008b6 <__vector_16>:

//ISR(TIMER3_OVF_vect){
ISR(TIMER0_OVF_vect){
     8b6:	1f 92       	push	r1
     8b8:	0f 92       	push	r0
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	0f 92       	push	r0
     8be:	11 24       	eor	r1, r1
     8c0:	0b b6       	in	r0, 0x3b	; 59
     8c2:	0f 92       	push	r0
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	2f 93       	push	r18
     8ce:	3f 93       	push	r19
     8d0:	4f 93       	push	r20
     8d2:	5f 93       	push	r21
     8d4:	6f 93       	push	r22
     8d6:	7f 93       	push	r23
     8d8:	8f 93       	push	r24
     8da:	9f 93       	push	r25
     8dc:	af 93       	push	r26
     8de:	bf 93       	push	r27
     8e0:	cf 93       	push	r28
     8e2:	ef 93       	push	r30
     8e4:	ff 93       	push	r31
			
	TCNT0 = 256 - 125;
     8e6:	83 e8       	ldi	r24, 0x83	; 131
     8e8:	82 bf       	out	0x32, r24	; 50
	//TCNT3 = 65536 - 125;		
	//Read LS7366
	int32_t cnt;
	
	PORTC = 0x01;
     8ea:	c1 e0       	ldi	r28, 0x01	; 1
     8ec:	c5 bb       	out	0x15, r28	; 21
	
	g_ADC = getADC(0);
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	2d dc       	rcall	.-1958   	; 0x14c <getADC>
     8f2:	bc 01       	movw	r22, r24
     8f4:	99 0f       	add	r25, r25
     8f6:	88 0b       	sbc	r24, r24
     8f8:	99 0b       	sbc	r25, r25
     8fa:	68 d3       	rcall	.+1744   	; 0xfcc <__floatsisf>
     8fc:	60 93 5f 02 	sts	0x025F, r22	; 0x80025f <g_ADC>
     900:	70 93 60 02 	sts	0x0260, r23	; 0x800260 <g_ADC+0x1>
     904:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <g_ADC+0x2>
     908:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <g_ADC+0x3>
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | LOAD_REG);
     90c:	18 ba       	out	0x18, r1	; 24
     90e:	88 ee       	ldi	r24, 0xE8	; 232
     910:	4f d2       	rcall	.+1182   	; 0xdb0 <SPI_MasterSend>
	PORTB = 0x01;
			
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | RD_REG);
     912:	c8 bb       	out	0x18, r28	; 24
     914:	18 ba       	out	0x18, r1	; 24
     916:	88 e6       	ldi	r24, 0x68	; 104
	cnt = SPI_MasterRecv();		cnt = cnt<< 8;
     918:	4b d2       	rcall	.+1174   	; 0xdb0 <SPI_MasterSend>
     91a:	4f d2       	rcall	.+1182   	; 0xdba <SPI_MasterRecv>
     91c:	c8 2e       	mov	r12, r24
     91e:	d1 2c       	mov	r13, r1
     920:	e1 2c       	mov	r14, r1
     922:	f1 2c       	mov	r15, r1
     924:	fe 2c       	mov	r15, r14
     926:	ed 2c       	mov	r14, r13
     928:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     92a:	cc 24       	eor	r12, r12
     92c:	46 d2       	rcall	.+1164   	; 0xdba <SPI_MasterRecv>
     92e:	c8 2a       	or	r12, r24
     930:	fe 2c       	mov	r15, r14
     932:	ed 2c       	mov	r14, r13
     934:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     936:	cc 24       	eor	r12, r12
     938:	40 d2       	rcall	.+1152   	; 0xdba <SPI_MasterRecv>
     93a:	c8 2a       	or	r12, r24
     93c:	fe 2c       	mov	r15, r14
     93e:	ed 2c       	mov	r14, r13
     940:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();
     942:	cc 24       	eor	r12, r12
     944:	3a d2       	rcall	.+1140   	; 0xdba <SPI_MasterRecv>
	PORTB = 0x01;
     946:	c8 bb       	out	0x18, r28	; 24
	g_Cnt = -cnt;
     948:	c8 2a       	or	r12, r24
     94a:	f0 94       	com	r15
     94c:	e0 94       	com	r14
     94e:	d0 94       	com	r13
     950:	c0 94       	com	r12
     952:	c1 1c       	adc	r12, r1
     954:	d1 1c       	adc	r13, r1
     956:	e1 1c       	adc	r14, r1
     958:	f1 1c       	adc	r15, r1
     95a:	c0 92 63 02 	sts	0x0263, r12	; 0x800263 <g_Cnt>
     95e:	d0 92 64 02 	sts	0x0264, r13	; 0x800264 <g_Cnt+0x1>
     962:	e0 92 65 02 	sts	0x0265, r14	; 0x800265 <g_Cnt+0x2>
     966:	f0 92 66 02 	sts	0x0266, r15	; 0x800266 <g_Cnt+0x3>
	
	PORTC = 0x03;
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	85 bb       	out	0x15, r24	; 21
	
	g_Pcur = (double)(g_Cnt / (4096. * 81.)) * 2 * M_PI; // rad
     96e:	60 91 63 02 	lds	r22, 0x0263	; 0x800263 <g_Cnt>
     972:	70 91 64 02 	lds	r23, 0x0264	; 0x800264 <g_Cnt+0x1>
     976:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <g_Cnt+0x2>
     97a:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <g_Cnt+0x3>
     97e:	26 d3       	rcall	.+1612   	; 0xfcc <__floatsisf>
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	42 ea       	ldi	r20, 0xA2	; 162
     986:	58 e4       	ldi	r21, 0x48	; 72
     988:	86 d2       	rcall	.+1292   	; 0xe96 <__divsf3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	1b d2       	rcall	.+1078   	; 0xdc6 <__addsf3>
     990:	2b ed       	ldi	r18, 0xDB	; 219
     992:	3f e0       	ldi	r19, 0x0F	; 15
     994:	49 e4       	ldi	r20, 0x49	; 73
     996:	50 e4       	ldi	r21, 0x40	; 64
     998:	cd d3       	rcall	.+1946   	; 0x1134 <__mulsf3>
     99a:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <g_Pcur>
     99e:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <g_Pcur+0x1>
     9a2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <g_Pcur+0x2>
     9a6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <g_Pcur+0x3>
	
	//TO DO
	// 위치제어기
	if((g_TimerCnt % 100) == 0){
     9aa:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <g_TimerCnt>
     9ae:	89 e2       	ldi	r24, 0x29	; 41
     9b0:	98 9f       	mul	r25, r24
     9b2:	81 2d       	mov	r24, r1
     9b4:	11 24       	eor	r1, r1
     9b6:	82 95       	swap	r24
     9b8:	8f 70       	andi	r24, 0x0F	; 15
     9ba:	24 e6       	ldi	r18, 0x64	; 100
     9bc:	82 9f       	mul	r24, r18
     9be:	90 19       	sub	r25, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	91 11       	cpse	r25, r1
	
		POSITION_CONTROL();	
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <__vector_16+0x116>
     9c6:	eb db       	rcall	.-2090   	; 0x19e <POSITION_CONTROL>
		g_TimerCnt = 0;
     9c8:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <g_TimerCnt>
		
	}
	// 속도제어기
	if((g_TimerCnt % 10) == 0){
     9cc:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <g_TimerCnt>
     9d0:	8d ec       	ldi	r24, 0xCD	; 205
     9d2:	28 9f       	mul	r18, r24
     9d4:	81 2d       	mov	r24, r1
     9d6:	11 24       	eor	r1, r1
     9d8:	86 95       	lsr	r24
     9da:	86 95       	lsr	r24
     9dc:	86 95       	lsr	r24
     9de:	88 0f       	add	r24, r24
     9e0:	98 2f       	mov	r25, r24
     9e2:	99 0f       	add	r25, r25
     9e4:	99 0f       	add	r25, r25
		
		VELOCITY_CONTROL();
     9e6:	89 0f       	add	r24, r25
     9e8:	28 13       	cpse	r18, r24
	}
	
	CURRENT_CONTROL();
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <__vector_16+0x138>
     9ec:	cd dc       	rcall	.-1638   	; 0x388 <VELOCITY_CONTROL>
	
	SetDutyCW(cur_control);
     9ee:	47 de       	rcall	.-882    	; 0x67e <CURRENT_CONTROL>
     9f0:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <cur_control>
     9f4:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <cur_control+0x1>
     9f8:	07 2e       	mov	r0, r23
     9fa:	00 0c       	add	r0, r0
     9fc:	88 0b       	sbc	r24, r24
     9fe:	99 0b       	sbc	r25, r25
     a00:	e5 d2       	rcall	.+1482   	; 0xfcc <__floatsisf>
     a02:	63 db       	rcall	.-2362   	; 0xca <SetDutyCW>
     a04:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <g_TimerCnt>
	
	/////////////////////////////////////////
	g_TimerCnt++;	
     a08:	8f 5f       	subi	r24, 0xFF	; 255
     a0a:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <g_TimerCnt>
     a0e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_SendFlag>
	g_SendFlag++;
     a12:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_SendFlag+0x1>
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_SendFlag+0x1>
     a1c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_SendFlag>
     a20:	ff 91       	pop	r31

}
     a22:	ef 91       	pop	r30
     a24:	cf 91       	pop	r28
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	7f 91       	pop	r23
     a30:	6f 91       	pop	r22
     a32:	5f 91       	pop	r21
     a34:	4f 91       	pop	r20
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	0f 90       	pop	r0
     a44:	0b be       	out	0x3b, r0	; 59
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0
     a4c:	1f 90       	pop	r1
     a4e:	18 95       	reti

00000a50 <main>:
     a50:	cf 93       	push	r28



int main(void){
     a52:	df 93       	push	r29
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	64 97       	sbiw	r28, 0x14	; 20
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
	
	Packet_t packet;
	packet.data.header[0] = packet.data.header[1] = packet.data.header[2] = packet.data.header[3] = 0xFE;
     a64:	8e ef       	ldi	r24, 0xFE	; 254
     a66:	8c 83       	std	Y+4, r24	; 0x04
     a68:	8b 83       	std	Y+3, r24	; 0x03
     a6a:	8a 83       	std	Y+2, r24	; 0x02
     a6c:	89 83       	std	Y+1, r24	; 0x01
	
	InitIO();
     a6e:	47 d1       	rcall	.+654    	; 0xcfe <InitIO>
	
	//Uart
	InitUart0();
     a70:	8d d1       	rcall	.+794    	; 0xd8c <InitUart0>
	
	//SPI
	InitSPI();
     a72:	95 d1       	rcall	.+810    	; 0xd9e <InitSPI>
	
	//Timer
	InitTimer0();
     a74:	51 d1       	rcall	.+674    	; 0xd18 <InitTimer0>
     a76:	55 d1       	rcall	.+682    	; 0xd22 <InitTimer1>
	InitTimer1();
     a78:	67 d1       	rcall	.+718    	; 0xd48 <InitTimer3>
     a7a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	InitTimer3();
     a7e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


	TCNT1 = TCNT3 = 0;
     a82:	1d bc       	out	0x2d, r1	; 45
     a84:	1c bc       	out	0x2c, r1	; 44
     a86:	60 e0       	ldi	r22, 0x00	; 0
	SetDutyCW(0.);
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	cb 01       	movw	r24, r22
     a8c:	1e db       	rcall	.-2500   	; 0xca <SetDutyCW>
     a8e:	79 d1       	rcall	.+754    	; 0xd82 <InitADC>
     a90:	49 db       	rcall	.-2414   	; 0x124 <InitLS7366>
	
	//ADC
	InitADC();
     a92:	83 e8       	ldi	r24, 0x83	; 131
     a94:	82 bf       	out	0x32, r24	; 50
	
	//LS7366
	InitLS7366();
     a96:	78 94       	sei
     a98:	b1 2c       	mov	r11, r1
	
	//TCNT3 = 65536 - 125;
	TCNT0 = 256 - 125;
     a9a:	0f 2e       	mov	r0, r31
     a9c:	f4 e1       	ldi	r31, 0x14	; 20
	sei();
     a9e:	9f 2e       	mov	r9, r31

	unsigned char check = 0;
     aa0:	f0 2d       	mov	r31, r0

		if(g_SendFlag > 19){
			g_SendFlag = 0;			
			
			packet.data.id = g_ID;
			packet.data.size = sizeof(Packet_data_t);
     aa2:	0f 2e       	mov	r0, r31
     aa4:	f3 e0       	ldi	r31, 0x03	; 3
     aa6:	af 2e       	mov	r10, r31
     aa8:	f0 2d       	mov	r31, r0
			packet.data.mode = 3;
     aaa:	7e 01       	movw	r14, r28
     aac:	85 e1       	ldi	r24, 0x15	; 21
     aae:	e8 0e       	add	r14, r24
     ab0:	f1 1c       	adc	r15, r1
     ab2:	0f 2e       	mov	r0, r31
     ab4:	fa e4       	ldi	r31, 0x4A	; 74
     ab6:	cf 2e       	mov	r12, r31
     ab8:	f2 e0       	ldi	r31, 0x02	; 2
			case 1:

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
				
				if (checkSize == 8) {
					if(g_PacketBuffer.data.id == g_ID){
     aba:	df 2e       	mov	r13, r31
     abc:	f0 2d       	mov	r31, r0
     abe:	68 94       	set
     ac0:	77 24       	eor	r7, r7
     ac2:	71 f8       	bld	r7, 1
     ac4:	88 24       	eor	r8, r8

						g_PacketMode = 2;
     ac6:	83 94       	inc	r8
     ac8:	ba c0       	rjmp	.+372    	; 0xc3e <main+0x1ee>
     aca:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <g_PacketMode>
			case 0:
				
				if (g_buf[g_BufReadCnt] == 0xFF) {
					checkSize++;
					if (checkSize == 4) {
						g_PacketMode = 1;
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	e1 f0       	breq	.+56     	; 0xb0a <main+0xba>
	unsigned char check = 0;
	
    while (1) {
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
			
			switch(g_PacketMode){
     ad2:	18 f0       	brcs	.+6      	; 0xada <main+0x8a>
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	e1 f1       	breq	.+120    	; 0xb50 <main+0x100>
     ad8:	ad c0       	rjmp	.+346    	; 0xc34 <main+0x1e4>
     ada:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <g_BufReadCnt>
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ee 5b       	subi	r30, 0xBE	; 190
			case 0:
				
				if (g_buf[g_BufReadCnt] == 0xFF) {
     ae2:	fe 4f       	sbci	r31, 0xFE	; 254
     ae4:	80 81       	ld	r24, Z
     ae6:	8f 3f       	cpi	r24, 0xFF	; 255
     ae8:	69 f4       	brne	.+26     	; 0xb04 <main+0xb4>
     aea:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <checkSize>
					checkSize++;
     af4:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
     af8:	84 30       	cpi	r24, 0x04	; 4
     afa:	09 f0       	breq	.+2      	; 0xafe <main+0xae>
					if (checkSize == 4) {
     afc:	9b c0       	rjmp	.+310    	; 0xc34 <main+0x1e4>
     afe:	80 92 68 02 	sts	0x0268, r8	; 0x800268 <g_PacketMode>
     b02:	98 c0       	rjmp	.+304    	; 0xc34 <main+0x1e4>
     b04:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <checkSize>
						g_PacketMode = 1;
     b08:	95 c0       	rjmp	.+298    	; 0xc34 <main+0x1e4>
     b0a:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <checkSize>
					}
				}
				else {
					checkSize = 0;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	8e 0f       	add	r24, r30
				}
				break;
				
			case 1:

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     b12:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <checkSize>
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <g_BufReadCnt>
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	ae 5b       	subi	r26, 0xBE	; 190
     b20:	be 4f       	sbci	r27, 0xFE	; 254
     b22:	8c 91       	ld	r24, X
     b24:	e6 5b       	subi	r30, 0xB6	; 182
     b26:	fd 4f       	sbci	r31, 0xFD	; 253
     b28:	80 83       	st	Z, r24
     b2a:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
     b2e:	88 30       	cpi	r24, 0x08	; 8
     b30:	09 f0       	breq	.+2      	; 0xb34 <main+0xe4>
				
				if (checkSize == 8) {
     b32:	80 c0       	rjmp	.+256    	; 0xc34 <main+0x1e4>
     b34:	f6 01       	movw	r30, r12
     b36:	95 81       	ldd	r25, Z+5	; 0x05
     b38:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
					if(g_PacketBuffer.data.id == g_ID){
     b3c:	98 13       	cpse	r25, r24
     b3e:	03 c0       	rjmp	.+6      	; 0xb46 <main+0xf6>
     b40:	70 92 68 02 	sts	0x0268, r7	; 0x800268 <g_PacketMode>
     b44:	77 c0       	rjmp	.+238    	; 0xc34 <main+0x1e4>
     b46:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <g_PacketMode>

						g_PacketMode = 2;
     b4a:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <checkSize>
					}
					else{
						g_PacketMode = 0;
     b4e:	72 c0       	rjmp	.+228    	; 0xc34 <main+0x1e4>
     b50:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <checkSize>
						checkSize = 0;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	8e 0f       	add	r24, r30

				break;
			
			case 2:
				
				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     b58:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <checkSize>
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <g_BufReadCnt>
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ae 5b       	subi	r26, 0xBE	; 190
     b66:	be 4f       	sbci	r27, 0xFE	; 254
     b68:	8c 91       	ld	r24, X
     b6a:	e6 5b       	subi	r30, 0xB6	; 182
     b6c:	fd 4f       	sbci	r31, 0xFD	; 253
     b6e:	80 83       	st	Z, r24
     b70:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <g_BufReadCnt>
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	ee 5b       	subi	r30, 0xBE	; 190
				check += g_buf[g_BufReadCnt];
     b78:	fe 4f       	sbci	r31, 0xFE	; 254
     b7a:	80 81       	ld	r24, Z
     b7c:	b8 0e       	add	r11, r24
     b7e:	f6 01       	movw	r30, r12
     b80:	94 81       	ldd	r25, Z+4	; 0x04
     b82:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
				
				if (checkSize == g_PacketBuffer.data.size) {
     b86:	98 13       	cpse	r25, r24
     b88:	44 c0       	rjmp	.+136    	; 0xc12 <main+0x1c2>
     b8a:	87 81       	ldd	r24, Z+7	; 0x07
     b8c:	b8 12       	cpse	r11, r24
     b8e:	3b c0       	rjmp	.+118    	; 0xc06 <main+0x1b6>
     b90:	86 81       	ldd	r24, Z+6	; 0x06

					if(check == g_PacketBuffer.data.check){
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	c1 f5       	brne	.+112    	; 0xc06 <main+0x1b6>

						switch(g_PacketBuffer.data.mode){
     b96:	60 85       	ldd	r22, Z+8	; 0x08
     b98:	71 85       	ldd	r23, Z+9	; 0x09
     b9a:	82 85       	ldd	r24, Z+10	; 0x0a

							case 2:
							g_Pdes = g_PacketBuffer.data.pos / 1000.;
     b9c:	93 85       	ldd	r25, Z+11	; 0x0b
     b9e:	16 d2       	rcall	.+1068   	; 0xfcc <__floatsisf>
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	4a e7       	ldi	r20, 0x7A	; 122
     ba6:	54 e4       	ldi	r21, 0x44	; 68
     ba8:	76 d1       	rcall	.+748    	; 0xe96 <__divsf3>
     baa:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <g_Pdes>
     bae:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <g_Pdes+0x1>
     bb2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <g_Pdes+0x2>
     bb6:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <g_Pdes+0x3>
     bba:	f6 01       	movw	r30, r12
     bbc:	64 85       	ldd	r22, Z+12	; 0x0c
     bbe:	75 85       	ldd	r23, Z+13	; 0x0d
							g_Vlimit = g_PacketBuffer.data.velo / 1000.;
     bc0:	86 85       	ldd	r24, Z+14	; 0x0e
     bc2:	97 85       	ldd	r25, Z+15	; 0x0f
     bc4:	03 d2       	rcall	.+1030   	; 0xfcc <__floatsisf>
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	4a e7       	ldi	r20, 0x7A	; 122
     bcc:	54 e4       	ldi	r21, 0x44	; 68
     bce:	63 d1       	rcall	.+710    	; 0xe96 <__divsf3>
     bd0:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <g_Vlimit>
     bd4:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <g_Vlimit+0x1>
     bd8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_Vlimit+0x2>
     bdc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_Vlimit+0x3>
     be0:	f6 01       	movw	r30, r12
     be2:	60 89       	ldd	r22, Z+16	; 0x10
     be4:	71 89       	ldd	r23, Z+17	; 0x11
							g_Climit = g_PacketBuffer.data.cur / 1000.;
     be6:	82 89       	ldd	r24, Z+18	; 0x12
     be8:	93 89       	ldd	r25, Z+19	; 0x13
     bea:	f0 d1       	rcall	.+992    	; 0xfcc <__floatsisf>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4a e7       	ldi	r20, 0x7A	; 122
     bf2:	54 e4       	ldi	r21, 0x44	; 68
     bf4:	50 d1       	rcall	.+672    	; 0xe96 <__divsf3>
     bf6:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <g_Climit>
     bfa:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <g_Climit+0x1>
     bfe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <g_Climit+0x2>
     c02:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <g_Climit+0x3>
     c06:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <g_PacketMode>
     c0a:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <checkSize>
     c0e:	b1 2c       	mov	r11, r1
							break;
							}
					}
					
					check = 0;
					g_PacketMode = 0;
     c10:	11 c0       	rjmp	.+34     	; 0xc34 <main+0x1e4>
     c12:	f6 01       	movw	r30, r12
					checkSize = 0;
     c14:	94 81       	ldd	r25, Z+4	; 0x04
							g_Climit = g_PacketBuffer.data.cur / 1000.;
							break;
							}
					}
					
					check = 0;
     c16:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
					g_PacketMode = 0;
					checkSize = 0;
				}
				else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)) {
     c1a:	98 17       	cp	r25, r24
     c1c:	20 f0       	brcs	.+8      	; 0xc26 <main+0x1d6>
     c1e:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
     c22:	85 31       	cpi	r24, 0x15	; 21
     c24:	38 f0       	brcs	.+14     	; 0xc34 <main+0x1e4>
     c26:	86 e6       	ldi	r24, 0x66	; 102
     c28:	bf d0       	rcall	.+382    	; 0xda8 <TransUart0>
     c2a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <g_PacketMode>
					TransUart0('f');
     c2e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <checkSize>
     c32:	b1 2c       	mov	r11, r1
					check = 0;
					g_PacketMode = 0;
     c34:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <g_BufReadCnt>
					checkSize = 0;
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <g_BufReadCnt>
	sei();

	unsigned char check = 0;
	
    while (1) {
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
     c3e:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <g_BufReadCnt>
     c42:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_BufWriteCnt>
     c46:	98 13       	cpse	r25, r24
     c48:	40 cf       	rjmp	.-384    	; 0xaca <main+0x7a>
     c4a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_SendFlag>
     c4e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_SendFlag+0x1>
     c52:	44 97       	sbiw	r24, 0x14	; 20
					checkSize = 0;
				}
			}
		}

		if(g_SendFlag > 19){
     c54:	a4 f3       	brlt	.-24     	; 0xc3e <main+0x1ee>
     c56:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_SendFlag+0x1>
     c5a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_SendFlag>
     c5e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			g_SendFlag = 0;			
     c62:	8e 83       	std	Y+6, r24	; 0x06
     c64:	9d 82       	std	Y+5, r9	; 0x05
     c66:	af 82       	std	Y+7, r10	; 0x07
			
			packet.data.id = g_ID;
     c68:	18 86       	std	Y+8, r1	; 0x08
     c6a:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <g_Pcur>
			packet.data.size = sizeof(Packet_data_t);
			packet.data.mode = 3;
			packet.data.check = 0;
     c6e:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <g_Pcur+0x1>
			
			//packet.data.pos = g_Pdes * 1000; 
			//packet.data.velo = g_Vlimit * 1000;
			//packet.data.cur = g_Climit * 1000;  
			packet.data.pos = g_Pcur * 1000;
     c72:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <g_Pcur+0x2>
     c76:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <g_Pcur+0x3>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	4a e7       	ldi	r20, 0x7A	; 122
     c80:	54 e4       	ldi	r21, 0x44	; 68
     c82:	58 d2       	rcall	.+1200   	; 0x1134 <__mulsf3>
     c84:	70 d1       	rcall	.+736    	; 0xf66 <__fixsfsi>
     c86:	69 87       	std	Y+9, r22	; 0x09
     c88:	7a 87       	std	Y+10, r23	; 0x0a
     c8a:	8b 87       	std	Y+11, r24	; 0x0b
     c8c:	9c 87       	std	Y+12, r25	; 0x0c
     c8e:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_Vcur>
     c92:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_Vcur+0x1>
			packet.data.velo = g_Vcur * 1000;
     c96:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_Vcur+0x2>
     c9a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_Vcur+0x3>
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	4a e7       	ldi	r20, 0x7A	; 122
     ca4:	54 e4       	ldi	r21, 0x44	; 68
     ca6:	46 d2       	rcall	.+1164   	; 0x1134 <__mulsf3>
     ca8:	5e d1       	rcall	.+700    	; 0xf66 <__fixsfsi>
     caa:	6d 87       	std	Y+13, r22	; 0x0d
     cac:	7e 87       	std	Y+14, r23	; 0x0e
     cae:	8f 87       	std	Y+15, r24	; 0x0f
     cb0:	98 8b       	std	Y+16, r25	; 0x10
     cb2:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <g_Ccur>
     cb6:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <g_Ccur+0x1>
			packet.data.cur = g_Ccur * 1000;
     cba:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_Ccur+0x2>
     cbe:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <g_Ccur+0x3>
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	4a e7       	ldi	r20, 0x7A	; 122
     cc8:	54 e4       	ldi	r21, 0x44	; 68
     cca:	34 d2       	rcall	.+1128   	; 0x1134 <__mulsf3>
     ccc:	4c d1       	rcall	.+664    	; 0xf66 <__fixsfsi>
     cce:	69 8b       	std	Y+17, r22	; 0x11
     cd0:	7a 8b       	std	Y+18, r23	; 0x12
     cd2:	8b 8b       	std	Y+19, r24	; 0x13
     cd4:	9c 8b       	std	Y+20, r25	; 0x14
     cd6:	fe 01       	movw	r30, r28
     cd8:	39 96       	adiw	r30, 0x09	; 9
     cda:	81 91       	ld	r24, Z+
     cdc:	98 85       	ldd	r25, Y+8	; 0x08
     cde:	89 0f       	add	r24, r25
     ce0:	88 87       	std	Y+8, r24	; 0x08
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
     ce2:	ee 15       	cp	r30, r14
     ce4:	ff 05       	cpc	r31, r15
     ce6:	c9 f7       	brne	.-14     	; 0xcda <main+0x28a>
     ce8:	8e 01       	movw	r16, r28
			//packet.data.cur = g_Climit * 1000;  
			packet.data.pos = g_Pcur * 1000;
			packet.data.velo = g_Vcur * 1000;
			packet.data.cur = g_Ccur * 1000;
			
			for (int i = 8; i < sizeof(Packet_t); i++)
     cea:	0f 5f       	subi	r16, 0xFF	; 255
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	f8 01       	movw	r30, r16
     cf0:	81 91       	ld	r24, Z+
     cf2:	8f 01       	movw	r16, r30
     cf4:	59 d0       	rcall	.+178    	; 0xda8 <TransUart0>
			packet.data.check += packet.buffer[i];
			
			for(int i=0; i<packet.data.size; i++){
				TransUart0(packet.buffer[i]);
     cf6:	0e 15       	cp	r16, r14
     cf8:	1f 05       	cpc	r17, r15
     cfa:	c9 f7       	brne	.-14     	; 0xcee <main+0x29e>
     cfc:	a0 cf       	rjmp	.-192    	; 0xc3e <main+0x1ee>

00000cfe <InitIO>:
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
			packet.data.cur = g_Ccur * 1000;
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
			
			for(int i=0; i<packet.data.size; i++){
     d00:	8a bb       	out	0x1a, r24	; 26
     d02:	84 bb       	out	0x14, r24	; 20
     d04:	88 e0       	ldi	r24, 0x08	; 8
     d06:	81 bb       	out	0x11, r24	; 17
     d08:	87 e6       	ldi	r24, 0x67	; 103
     d0a:	87 bb       	out	0x17, r24	; 23
     d0c:	8a e1       	ldi	r24, 0x1A	; 26
     d0e:	82 b9       	out	0x02, r24	; 2
     d10:	1b ba       	out	0x1b, r1	; 27
     d12:	87 e0       	ldi	r24, 0x07	; 7
     d14:	88 bb       	out	0x18, r24	; 24
     d16:	08 95       	ret

00000d18 <InitTimer0>:
     d18:	84 e0       	ldi	r24, 0x04	; 4
     d1a:	83 bf       	out	0x33, r24	; 51
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	87 bf       	out	0x37, r24	; 55
     d20:	08 95       	ret

00000d22 <InitTimer1>:
     d22:	82 ee       	ldi	r24, 0xE2	; 226
     d24:	8f bd       	out	0x2f, r24	; 47
     d26:	81 e1       	ldi	r24, 0x11	; 17
     d28:	8e bd       	out	0x2e, r24	; 46
     d2a:	8f e8       	ldi	r24, 0x8F	; 143
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	97 bd       	out	0x27, r25	; 39
     d30:	86 bd       	out	0x26, r24	; 38
     d32:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     d36:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     d3a:	1b bc       	out	0x2b, r1	; 43
     d3c:	1a bc       	out	0x2a, r1	; 42
     d3e:	19 bc       	out	0x29, r1	; 41
     d40:	18 bc       	out	0x28, r1	; 40
     d42:	1d bc       	out	0x2d, r1	; 45
     d44:	1c bc       	out	0x2c, r1	; 44
     d46:	08 95       	ret

00000d48 <InitTimer3>:
     d48:	82 eb       	ldi	r24, 0xB2	; 178
     d4a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     d4e:	81 e1       	ldi	r24, 0x11	; 17
     d50:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     d54:	8f e8       	ldi	r24, 0x8F	; 143
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d5c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d60:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     d64:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     d68:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d6c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     d70:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d74:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     d78:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d7c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     d80:	08 95       	ret

00000d82 <InitADC>:
     d82:	80 e4       	ldi	r24, 0x40	; 64
     d84:	87 b9       	out	0x07, r24	; 7
     d86:	86 e8       	ldi	r24, 0x86	; 134
     d88:	86 b9       	out	0x06, r24	; 6
     d8a:	08 95       	ret

00000d8c <InitUart0>:
     d8c:	1b b8       	out	0x0b, r1	; 11
     d8e:	88 e9       	ldi	r24, 0x98	; 152
     d90:	8a b9       	out	0x0a, r24	; 10
     d92:	86 e0       	ldi	r24, 0x06	; 6
     d94:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     d98:	87 e6       	ldi	r24, 0x67	; 103
     d9a:	89 b9       	out	0x09, r24	; 9
     d9c:	08 95       	ret

00000d9e <InitSPI>:
     d9e:	80 e5       	ldi	r24, 0x50	; 80
     da0:	8d b9       	out	0x0d, r24	; 13
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	8e b9       	out	0x0e, r24	; 14
     da6:	08 95       	ret

00000da8 <TransUart0>:
     da8:	5d 9b       	sbis	0x0b, 5	; 11
     daa:	fe cf       	rjmp	.-4      	; 0xda8 <TransUart0>
     dac:	8c b9       	out	0x0c, r24	; 12
     dae:	08 95       	ret

00000db0 <SPI_MasterSend>:
     db0:	8f b9       	out	0x0f, r24	; 15
     db2:	77 9b       	sbis	0x0e, 7	; 14
     db4:	fe cf       	rjmp	.-4      	; 0xdb2 <SPI_MasterSend+0x2>
     db6:	8f b1       	in	r24, 0x0f	; 15
     db8:	08 95       	ret

00000dba <SPI_MasterRecv>:
     dba:	1f b8       	out	0x0f, r1	; 15
     dbc:	77 9b       	sbis	0x0e, 7	; 14
     dbe:	fe cf       	rjmp	.-4      	; 0xdbc <SPI_MasterRecv+0x2>
     dc0:	8f b1       	in	r24, 0x0f	; 15
     dc2:	08 95       	ret

00000dc4 <__subsf3>:
     dc4:	50 58       	subi	r21, 0x80	; 128

00000dc6 <__addsf3>:
     dc6:	bb 27       	eor	r27, r27
     dc8:	aa 27       	eor	r26, r26
     dca:	0e d0       	rcall	.+28     	; 0xde8 <__addsf3x>
     dcc:	75 c1       	rjmp	.+746    	; 0x10b8 <__fp_round>
     dce:	66 d1       	rcall	.+716    	; 0x109c <__fp_pscA>
     dd0:	30 f0       	brcs	.+12     	; 0xdde <__addsf3+0x18>
     dd2:	6b d1       	rcall	.+726    	; 0x10aa <__fp_pscB>
     dd4:	20 f0       	brcs	.+8      	; 0xdde <__addsf3+0x18>
     dd6:	31 f4       	brne	.+12     	; 0xde4 <__addsf3+0x1e>
     dd8:	9f 3f       	cpi	r25, 0xFF	; 255
     dda:	11 f4       	brne	.+4      	; 0xde0 <__addsf3+0x1a>
     ddc:	1e f4       	brtc	.+6      	; 0xde4 <__addsf3+0x1e>
     dde:	5b c1       	rjmp	.+694    	; 0x1096 <__fp_nan>
     de0:	0e f4       	brtc	.+2      	; 0xde4 <__addsf3+0x1e>
     de2:	e0 95       	com	r30
     de4:	e7 fb       	bst	r30, 7
     de6:	51 c1       	rjmp	.+674    	; 0x108a <__fp_inf>

00000de8 <__addsf3x>:
     de8:	e9 2f       	mov	r30, r25
     dea:	77 d1       	rcall	.+750    	; 0x10da <__fp_split3>
     dec:	80 f3       	brcs	.-32     	; 0xdce <__addsf3+0x8>
     dee:	ba 17       	cp	r27, r26
     df0:	62 07       	cpc	r22, r18
     df2:	73 07       	cpc	r23, r19
     df4:	84 07       	cpc	r24, r20
     df6:	95 07       	cpc	r25, r21
     df8:	18 f0       	brcs	.+6      	; 0xe00 <__addsf3x+0x18>
     dfa:	71 f4       	brne	.+28     	; 0xe18 <__addsf3x+0x30>
     dfc:	9e f5       	brtc	.+102    	; 0xe64 <__addsf3x+0x7c>
     dfe:	8f c1       	rjmp	.+798    	; 0x111e <__fp_zero>
     e00:	0e f4       	brtc	.+2      	; 0xe04 <__addsf3x+0x1c>
     e02:	e0 95       	com	r30
     e04:	0b 2e       	mov	r0, r27
     e06:	ba 2f       	mov	r27, r26
     e08:	a0 2d       	mov	r26, r0
     e0a:	0b 01       	movw	r0, r22
     e0c:	b9 01       	movw	r22, r18
     e0e:	90 01       	movw	r18, r0
     e10:	0c 01       	movw	r0, r24
     e12:	ca 01       	movw	r24, r20
     e14:	a0 01       	movw	r20, r0
     e16:	11 24       	eor	r1, r1
     e18:	ff 27       	eor	r31, r31
     e1a:	59 1b       	sub	r21, r25
     e1c:	99 f0       	breq	.+38     	; 0xe44 <__addsf3x+0x5c>
     e1e:	59 3f       	cpi	r21, 0xF9	; 249
     e20:	50 f4       	brcc	.+20     	; 0xe36 <__addsf3x+0x4e>
     e22:	50 3e       	cpi	r21, 0xE0	; 224
     e24:	68 f1       	brcs	.+90     	; 0xe80 <__addsf3x+0x98>
     e26:	1a 16       	cp	r1, r26
     e28:	f0 40       	sbci	r31, 0x00	; 0
     e2a:	a2 2f       	mov	r26, r18
     e2c:	23 2f       	mov	r18, r19
     e2e:	34 2f       	mov	r19, r20
     e30:	44 27       	eor	r20, r20
     e32:	58 5f       	subi	r21, 0xF8	; 248
     e34:	f3 cf       	rjmp	.-26     	; 0xe1c <__addsf3x+0x34>
     e36:	46 95       	lsr	r20
     e38:	37 95       	ror	r19
     e3a:	27 95       	ror	r18
     e3c:	a7 95       	ror	r26
     e3e:	f0 40       	sbci	r31, 0x00	; 0
     e40:	53 95       	inc	r21
     e42:	c9 f7       	brne	.-14     	; 0xe36 <__addsf3x+0x4e>
     e44:	7e f4       	brtc	.+30     	; 0xe64 <__addsf3x+0x7c>
     e46:	1f 16       	cp	r1, r31
     e48:	ba 0b       	sbc	r27, r26
     e4a:	62 0b       	sbc	r22, r18
     e4c:	73 0b       	sbc	r23, r19
     e4e:	84 0b       	sbc	r24, r20
     e50:	ba f0       	brmi	.+46     	; 0xe80 <__addsf3x+0x98>
     e52:	91 50       	subi	r25, 0x01	; 1
     e54:	a1 f0       	breq	.+40     	; 0xe7e <__addsf3x+0x96>
     e56:	ff 0f       	add	r31, r31
     e58:	bb 1f       	adc	r27, r27
     e5a:	66 1f       	adc	r22, r22
     e5c:	77 1f       	adc	r23, r23
     e5e:	88 1f       	adc	r24, r24
     e60:	c2 f7       	brpl	.-16     	; 0xe52 <__addsf3x+0x6a>
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <__addsf3x+0x98>
     e64:	ba 0f       	add	r27, r26
     e66:	62 1f       	adc	r22, r18
     e68:	73 1f       	adc	r23, r19
     e6a:	84 1f       	adc	r24, r20
     e6c:	48 f4       	brcc	.+18     	; 0xe80 <__addsf3x+0x98>
     e6e:	87 95       	ror	r24
     e70:	77 95       	ror	r23
     e72:	67 95       	ror	r22
     e74:	b7 95       	ror	r27
     e76:	f7 95       	ror	r31
     e78:	9e 3f       	cpi	r25, 0xFE	; 254
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <__addsf3x+0x96>
     e7c:	b3 cf       	rjmp	.-154    	; 0xde4 <__addsf3+0x1e>
     e7e:	93 95       	inc	r25
     e80:	88 0f       	add	r24, r24
     e82:	08 f0       	brcs	.+2      	; 0xe86 <__addsf3x+0x9e>
     e84:	99 27       	eor	r25, r25
     e86:	ee 0f       	add	r30, r30
     e88:	97 95       	ror	r25
     e8a:	87 95       	ror	r24
     e8c:	08 95       	ret

00000e8e <__cmpsf2>:
     e8e:	d9 d0       	rcall	.+434    	; 0x1042 <__fp_cmp>
     e90:	08 f4       	brcc	.+2      	; 0xe94 <__cmpsf2+0x6>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	08 95       	ret

00000e96 <__divsf3>:
     e96:	0c d0       	rcall	.+24     	; 0xeb0 <__divsf3x>
     e98:	0f c1       	rjmp	.+542    	; 0x10b8 <__fp_round>
     e9a:	07 d1       	rcall	.+526    	; 0x10aa <__fp_pscB>
     e9c:	40 f0       	brcs	.+16     	; 0xeae <__divsf3+0x18>
     e9e:	fe d0       	rcall	.+508    	; 0x109c <__fp_pscA>
     ea0:	30 f0       	brcs	.+12     	; 0xeae <__divsf3+0x18>
     ea2:	21 f4       	brne	.+8      	; 0xeac <__divsf3+0x16>
     ea4:	5f 3f       	cpi	r21, 0xFF	; 255
     ea6:	19 f0       	breq	.+6      	; 0xeae <__divsf3+0x18>
     ea8:	f0 c0       	rjmp	.+480    	; 0x108a <__fp_inf>
     eaa:	51 11       	cpse	r21, r1
     eac:	39 c1       	rjmp	.+626    	; 0x1120 <__fp_szero>
     eae:	f3 c0       	rjmp	.+486    	; 0x1096 <__fp_nan>

00000eb0 <__divsf3x>:
     eb0:	14 d1       	rcall	.+552    	; 0x10da <__fp_split3>
     eb2:	98 f3       	brcs	.-26     	; 0xe9a <__divsf3+0x4>

00000eb4 <__divsf3_pse>:
     eb4:	99 23       	and	r25, r25
     eb6:	c9 f3       	breq	.-14     	; 0xeaa <__divsf3+0x14>
     eb8:	55 23       	and	r21, r21
     eba:	b1 f3       	breq	.-20     	; 0xea8 <__divsf3+0x12>
     ebc:	95 1b       	sub	r25, r21
     ebe:	55 0b       	sbc	r21, r21
     ec0:	bb 27       	eor	r27, r27
     ec2:	aa 27       	eor	r26, r26
     ec4:	62 17       	cp	r22, r18
     ec6:	73 07       	cpc	r23, r19
     ec8:	84 07       	cpc	r24, r20
     eca:	38 f0       	brcs	.+14     	; 0xeda <__divsf3_pse+0x26>
     ecc:	9f 5f       	subi	r25, 0xFF	; 255
     ece:	5f 4f       	sbci	r21, 0xFF	; 255
     ed0:	22 0f       	add	r18, r18
     ed2:	33 1f       	adc	r19, r19
     ed4:	44 1f       	adc	r20, r20
     ed6:	aa 1f       	adc	r26, r26
     ed8:	a9 f3       	breq	.-22     	; 0xec4 <__divsf3_pse+0x10>
     eda:	33 d0       	rcall	.+102    	; 0xf42 <__divsf3_pse+0x8e>
     edc:	0e 2e       	mov	r0, r30
     ede:	3a f0       	brmi	.+14     	; 0xeee <__divsf3_pse+0x3a>
     ee0:	e0 e8       	ldi	r30, 0x80	; 128
     ee2:	30 d0       	rcall	.+96     	; 0xf44 <__divsf3_pse+0x90>
     ee4:	91 50       	subi	r25, 0x01	; 1
     ee6:	50 40       	sbci	r21, 0x00	; 0
     ee8:	e6 95       	lsr	r30
     eea:	00 1c       	adc	r0, r0
     eec:	ca f7       	brpl	.-14     	; 0xee0 <__divsf3_pse+0x2c>
     eee:	29 d0       	rcall	.+82     	; 0xf42 <__divsf3_pse+0x8e>
     ef0:	fe 2f       	mov	r31, r30
     ef2:	27 d0       	rcall	.+78     	; 0xf42 <__divsf3_pse+0x8e>
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	bb 1f       	adc	r27, r27
     efc:	26 17       	cp	r18, r22
     efe:	37 07       	cpc	r19, r23
     f00:	48 07       	cpc	r20, r24
     f02:	ab 07       	cpc	r26, r27
     f04:	b0 e8       	ldi	r27, 0x80	; 128
     f06:	09 f0       	breq	.+2      	; 0xf0a <__divsf3_pse+0x56>
     f08:	bb 0b       	sbc	r27, r27
     f0a:	80 2d       	mov	r24, r0
     f0c:	bf 01       	movw	r22, r30
     f0e:	ff 27       	eor	r31, r31
     f10:	93 58       	subi	r25, 0x83	; 131
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	2a f0       	brmi	.+10     	; 0xf20 <__divsf3_pse+0x6c>
     f16:	9e 3f       	cpi	r25, 0xFE	; 254
     f18:	51 05       	cpc	r21, r1
     f1a:	68 f0       	brcs	.+26     	; 0xf36 <__divsf3_pse+0x82>
     f1c:	b6 c0       	rjmp	.+364    	; 0x108a <__fp_inf>
     f1e:	00 c1       	rjmp	.+512    	; 0x1120 <__fp_szero>
     f20:	5f 3f       	cpi	r21, 0xFF	; 255
     f22:	ec f3       	brlt	.-6      	; 0xf1e <__divsf3_pse+0x6a>
     f24:	98 3e       	cpi	r25, 0xE8	; 232
     f26:	dc f3       	brlt	.-10     	; 0xf1e <__divsf3_pse+0x6a>
     f28:	86 95       	lsr	r24
     f2a:	77 95       	ror	r23
     f2c:	67 95       	ror	r22
     f2e:	b7 95       	ror	r27
     f30:	f7 95       	ror	r31
     f32:	9f 5f       	subi	r25, 0xFF	; 255
     f34:	c9 f7       	brne	.-14     	; 0xf28 <__divsf3_pse+0x74>
     f36:	88 0f       	add	r24, r24
     f38:	91 1d       	adc	r25, r1
     f3a:	96 95       	lsr	r25
     f3c:	87 95       	ror	r24
     f3e:	97 f9       	bld	r25, 7
     f40:	08 95       	ret
     f42:	e1 e0       	ldi	r30, 0x01	; 1
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	bb 1f       	adc	r27, r27
     f4c:	62 17       	cp	r22, r18
     f4e:	73 07       	cpc	r23, r19
     f50:	84 07       	cpc	r24, r20
     f52:	ba 07       	cpc	r27, r26
     f54:	20 f0       	brcs	.+8      	; 0xf5e <__divsf3_pse+0xaa>
     f56:	62 1b       	sub	r22, r18
     f58:	73 0b       	sbc	r23, r19
     f5a:	84 0b       	sbc	r24, r20
     f5c:	ba 0b       	sbc	r27, r26
     f5e:	ee 1f       	adc	r30, r30
     f60:	88 f7       	brcc	.-30     	; 0xf44 <__divsf3_pse+0x90>
     f62:	e0 95       	com	r30
     f64:	08 95       	ret

00000f66 <__fixsfsi>:
     f66:	04 d0       	rcall	.+8      	; 0xf70 <__fixunssfsi>
     f68:	68 94       	set
     f6a:	b1 11       	cpse	r27, r1
     f6c:	d9 c0       	rjmp	.+434    	; 0x1120 <__fp_szero>
     f6e:	08 95       	ret

00000f70 <__fixunssfsi>:
     f70:	bc d0       	rcall	.+376    	; 0x10ea <__fp_splitA>
     f72:	88 f0       	brcs	.+34     	; 0xf96 <__fixunssfsi+0x26>
     f74:	9f 57       	subi	r25, 0x7F	; 127
     f76:	90 f0       	brcs	.+36     	; 0xf9c <__fixunssfsi+0x2c>
     f78:	b9 2f       	mov	r27, r25
     f7a:	99 27       	eor	r25, r25
     f7c:	b7 51       	subi	r27, 0x17	; 23
     f7e:	a0 f0       	brcs	.+40     	; 0xfa8 <__fixunssfsi+0x38>
     f80:	d1 f0       	breq	.+52     	; 0xfb6 <__fixunssfsi+0x46>
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	1a f0       	brmi	.+6      	; 0xf92 <__fixunssfsi+0x22>
     f8c:	ba 95       	dec	r27
     f8e:	c9 f7       	brne	.-14     	; 0xf82 <__fixunssfsi+0x12>
     f90:	12 c0       	rjmp	.+36     	; 0xfb6 <__fixunssfsi+0x46>
     f92:	b1 30       	cpi	r27, 0x01	; 1
     f94:	81 f0       	breq	.+32     	; 0xfb6 <__fixunssfsi+0x46>
     f96:	c3 d0       	rcall	.+390    	; 0x111e <__fp_zero>
     f98:	b1 e0       	ldi	r27, 0x01	; 1
     f9a:	08 95       	ret
     f9c:	c0 c0       	rjmp	.+384    	; 0x111e <__fp_zero>
     f9e:	67 2f       	mov	r22, r23
     fa0:	78 2f       	mov	r23, r24
     fa2:	88 27       	eor	r24, r24
     fa4:	b8 5f       	subi	r27, 0xF8	; 248
     fa6:	39 f0       	breq	.+14     	; 0xfb6 <__fixunssfsi+0x46>
     fa8:	b9 3f       	cpi	r27, 0xF9	; 249
     faa:	cc f3       	brlt	.-14     	; 0xf9e <__fixunssfsi+0x2e>
     fac:	86 95       	lsr	r24
     fae:	77 95       	ror	r23
     fb0:	67 95       	ror	r22
     fb2:	b3 95       	inc	r27
     fb4:	d9 f7       	brne	.-10     	; 0xfac <__fixunssfsi+0x3c>
     fb6:	3e f4       	brtc	.+14     	; 0xfc6 <__fixunssfsi+0x56>
     fb8:	90 95       	com	r25
     fba:	80 95       	com	r24
     fbc:	70 95       	com	r23
     fbe:	61 95       	neg	r22
     fc0:	7f 4f       	sbci	r23, 0xFF	; 255
     fc2:	8f 4f       	sbci	r24, 0xFF	; 255
     fc4:	9f 4f       	sbci	r25, 0xFF	; 255
     fc6:	08 95       	ret

00000fc8 <__floatunsisf>:
     fc8:	e8 94       	clt
     fca:	09 c0       	rjmp	.+18     	; 0xfde <__floatsisf+0x12>

00000fcc <__floatsisf>:
     fcc:	97 fb       	bst	r25, 7
     fce:	3e f4       	brtc	.+14     	; 0xfde <__floatsisf+0x12>
     fd0:	90 95       	com	r25
     fd2:	80 95       	com	r24
     fd4:	70 95       	com	r23
     fd6:	61 95       	neg	r22
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	99 23       	and	r25, r25
     fe0:	a9 f0       	breq	.+42     	; 0x100c <__floatsisf+0x40>
     fe2:	f9 2f       	mov	r31, r25
     fe4:	96 e9       	ldi	r25, 0x96	; 150
     fe6:	bb 27       	eor	r27, r27
     fe8:	93 95       	inc	r25
     fea:	f6 95       	lsr	r31
     fec:	87 95       	ror	r24
     fee:	77 95       	ror	r23
     ff0:	67 95       	ror	r22
     ff2:	b7 95       	ror	r27
     ff4:	f1 11       	cpse	r31, r1
     ff6:	f8 cf       	rjmp	.-16     	; 0xfe8 <__floatsisf+0x1c>
     ff8:	fa f4       	brpl	.+62     	; 0x1038 <__floatsisf+0x6c>
     ffa:	bb 0f       	add	r27, r27
     ffc:	11 f4       	brne	.+4      	; 0x1002 <__floatsisf+0x36>
     ffe:	60 ff       	sbrs	r22, 0
    1000:	1b c0       	rjmp	.+54     	; 0x1038 <__floatsisf+0x6c>
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	8f 4f       	sbci	r24, 0xFF	; 255
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	16 c0       	rjmp	.+44     	; 0x1038 <__floatsisf+0x6c>
    100c:	88 23       	and	r24, r24
    100e:	11 f0       	breq	.+4      	; 0x1014 <__floatsisf+0x48>
    1010:	96 e9       	ldi	r25, 0x96	; 150
    1012:	11 c0       	rjmp	.+34     	; 0x1036 <__floatsisf+0x6a>
    1014:	77 23       	and	r23, r23
    1016:	21 f0       	breq	.+8      	; 0x1020 <__floatsisf+0x54>
    1018:	9e e8       	ldi	r25, 0x8E	; 142
    101a:	87 2f       	mov	r24, r23
    101c:	76 2f       	mov	r23, r22
    101e:	05 c0       	rjmp	.+10     	; 0x102a <__floatsisf+0x5e>
    1020:	66 23       	and	r22, r22
    1022:	71 f0       	breq	.+28     	; 0x1040 <__floatsisf+0x74>
    1024:	96 e8       	ldi	r25, 0x86	; 134
    1026:	86 2f       	mov	r24, r22
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	2a f0       	brmi	.+10     	; 0x1038 <__floatsisf+0x6c>
    102e:	9a 95       	dec	r25
    1030:	66 0f       	add	r22, r22
    1032:	77 1f       	adc	r23, r23
    1034:	88 1f       	adc	r24, r24
    1036:	da f7       	brpl	.-10     	; 0x102e <__floatsisf+0x62>
    1038:	88 0f       	add	r24, r24
    103a:	96 95       	lsr	r25
    103c:	87 95       	ror	r24
    103e:	97 f9       	bld	r25, 7
    1040:	08 95       	ret

00001042 <__fp_cmp>:
    1042:	99 0f       	add	r25, r25
    1044:	00 08       	sbc	r0, r0
    1046:	55 0f       	add	r21, r21
    1048:	aa 0b       	sbc	r26, r26
    104a:	e0 e8       	ldi	r30, 0x80	; 128
    104c:	fe ef       	ldi	r31, 0xFE	; 254
    104e:	16 16       	cp	r1, r22
    1050:	17 06       	cpc	r1, r23
    1052:	e8 07       	cpc	r30, r24
    1054:	f9 07       	cpc	r31, r25
    1056:	c0 f0       	brcs	.+48     	; 0x1088 <__fp_cmp+0x46>
    1058:	12 16       	cp	r1, r18
    105a:	13 06       	cpc	r1, r19
    105c:	e4 07       	cpc	r30, r20
    105e:	f5 07       	cpc	r31, r21
    1060:	98 f0       	brcs	.+38     	; 0x1088 <__fp_cmp+0x46>
    1062:	62 1b       	sub	r22, r18
    1064:	73 0b       	sbc	r23, r19
    1066:	84 0b       	sbc	r24, r20
    1068:	95 0b       	sbc	r25, r21
    106a:	39 f4       	brne	.+14     	; 0x107a <__fp_cmp+0x38>
    106c:	0a 26       	eor	r0, r26
    106e:	61 f0       	breq	.+24     	; 0x1088 <__fp_cmp+0x46>
    1070:	23 2b       	or	r18, r19
    1072:	24 2b       	or	r18, r20
    1074:	25 2b       	or	r18, r21
    1076:	21 f4       	brne	.+8      	; 0x1080 <__fp_cmp+0x3e>
    1078:	08 95       	ret
    107a:	0a 26       	eor	r0, r26
    107c:	09 f4       	brne	.+2      	; 0x1080 <__fp_cmp+0x3e>
    107e:	a1 40       	sbci	r26, 0x01	; 1
    1080:	a6 95       	lsr	r26
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	81 1d       	adc	r24, r1
    1086:	81 1d       	adc	r24, r1
    1088:	08 95       	ret

0000108a <__fp_inf>:
    108a:	97 f9       	bld	r25, 7
    108c:	9f 67       	ori	r25, 0x7F	; 127
    108e:	80 e8       	ldi	r24, 0x80	; 128
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	08 95       	ret

00001096 <__fp_nan>:
    1096:	9f ef       	ldi	r25, 0xFF	; 255
    1098:	80 ec       	ldi	r24, 0xC0	; 192
    109a:	08 95       	ret

0000109c <__fp_pscA>:
    109c:	00 24       	eor	r0, r0
    109e:	0a 94       	dec	r0
    10a0:	16 16       	cp	r1, r22
    10a2:	17 06       	cpc	r1, r23
    10a4:	18 06       	cpc	r1, r24
    10a6:	09 06       	cpc	r0, r25
    10a8:	08 95       	ret

000010aa <__fp_pscB>:
    10aa:	00 24       	eor	r0, r0
    10ac:	0a 94       	dec	r0
    10ae:	12 16       	cp	r1, r18
    10b0:	13 06       	cpc	r1, r19
    10b2:	14 06       	cpc	r1, r20
    10b4:	05 06       	cpc	r0, r21
    10b6:	08 95       	ret

000010b8 <__fp_round>:
    10b8:	09 2e       	mov	r0, r25
    10ba:	03 94       	inc	r0
    10bc:	00 0c       	add	r0, r0
    10be:	11 f4       	brne	.+4      	; 0x10c4 <__fp_round+0xc>
    10c0:	88 23       	and	r24, r24
    10c2:	52 f0       	brmi	.+20     	; 0x10d8 <__fp_round+0x20>
    10c4:	bb 0f       	add	r27, r27
    10c6:	40 f4       	brcc	.+16     	; 0x10d8 <__fp_round+0x20>
    10c8:	bf 2b       	or	r27, r31
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <__fp_round+0x18>
    10cc:	60 ff       	sbrs	r22, 0
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <__fp_round+0x20>
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	8f 4f       	sbci	r24, 0xFF	; 255
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	08 95       	ret

000010da <__fp_split3>:
    10da:	57 fd       	sbrc	r21, 7
    10dc:	90 58       	subi	r25, 0x80	; 128
    10de:	44 0f       	add	r20, r20
    10e0:	55 1f       	adc	r21, r21
    10e2:	59 f0       	breq	.+22     	; 0x10fa <__fp_splitA+0x10>
    10e4:	5f 3f       	cpi	r21, 0xFF	; 255
    10e6:	71 f0       	breq	.+28     	; 0x1104 <__stack+0x5>
    10e8:	47 95       	ror	r20

000010ea <__fp_splitA>:
    10ea:	88 0f       	add	r24, r24
    10ec:	97 fb       	bst	r25, 7
    10ee:	99 1f       	adc	r25, r25
    10f0:	61 f0       	breq	.+24     	; 0x110a <__stack+0xb>
    10f2:	9f 3f       	cpi	r25, 0xFF	; 255
    10f4:	79 f0       	breq	.+30     	; 0x1114 <__stack+0x15>
    10f6:	87 95       	ror	r24
    10f8:	08 95       	ret
    10fa:	12 16       	cp	r1, r18
    10fc:	13 06       	cpc	r1, r19
    10fe:	14 06       	cpc	r1, r20
    1100:	55 1f       	adc	r21, r21
    1102:	f2 cf       	rjmp	.-28     	; 0x10e8 <__fp_split3+0xe>
    1104:	46 95       	lsr	r20
    1106:	f1 df       	rcall	.-30     	; 0x10ea <__fp_splitA>
    1108:	08 c0       	rjmp	.+16     	; 0x111a <__stack+0x1b>
    110a:	16 16       	cp	r1, r22
    110c:	17 06       	cpc	r1, r23
    110e:	18 06       	cpc	r1, r24
    1110:	99 1f       	adc	r25, r25
    1112:	f1 cf       	rjmp	.-30     	; 0x10f6 <__fp_splitA+0xc>
    1114:	86 95       	lsr	r24
    1116:	71 05       	cpc	r23, r1
    1118:	61 05       	cpc	r22, r1
    111a:	08 94       	sec
    111c:	08 95       	ret

0000111e <__fp_zero>:
    111e:	e8 94       	clt

00001120 <__fp_szero>:
    1120:	bb 27       	eor	r27, r27
    1122:	66 27       	eor	r22, r22
    1124:	77 27       	eor	r23, r23
    1126:	cb 01       	movw	r24, r22
    1128:	97 f9       	bld	r25, 7
    112a:	08 95       	ret

0000112c <__gesf2>:
    112c:	8a df       	rcall	.-236    	; 0x1042 <__fp_cmp>
    112e:	08 f4       	brcc	.+2      	; 0x1132 <__gesf2+0x6>
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	08 95       	ret

00001134 <__mulsf3>:
    1134:	0b d0       	rcall	.+22     	; 0x114c <__mulsf3x>
    1136:	c0 cf       	rjmp	.-128    	; 0x10b8 <__fp_round>
    1138:	b1 df       	rcall	.-158    	; 0x109c <__fp_pscA>
    113a:	28 f0       	brcs	.+10     	; 0x1146 <__mulsf3+0x12>
    113c:	b6 df       	rcall	.-148    	; 0x10aa <__fp_pscB>
    113e:	18 f0       	brcs	.+6      	; 0x1146 <__mulsf3+0x12>
    1140:	95 23       	and	r25, r21
    1142:	09 f0       	breq	.+2      	; 0x1146 <__mulsf3+0x12>
    1144:	a2 cf       	rjmp	.-188    	; 0x108a <__fp_inf>
    1146:	a7 cf       	rjmp	.-178    	; 0x1096 <__fp_nan>
    1148:	11 24       	eor	r1, r1
    114a:	ea cf       	rjmp	.-44     	; 0x1120 <__fp_szero>

0000114c <__mulsf3x>:
    114c:	c6 df       	rcall	.-116    	; 0x10da <__fp_split3>
    114e:	a0 f3       	brcs	.-24     	; 0x1138 <__mulsf3+0x4>

00001150 <__mulsf3_pse>:
    1150:	95 9f       	mul	r25, r21
    1152:	d1 f3       	breq	.-12     	; 0x1148 <__mulsf3+0x14>
    1154:	95 0f       	add	r25, r21
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	55 1f       	adc	r21, r21
    115a:	62 9f       	mul	r22, r18
    115c:	f0 01       	movw	r30, r0
    115e:	72 9f       	mul	r23, r18
    1160:	bb 27       	eor	r27, r27
    1162:	f0 0d       	add	r31, r0
    1164:	b1 1d       	adc	r27, r1
    1166:	63 9f       	mul	r22, r19
    1168:	aa 27       	eor	r26, r26
    116a:	f0 0d       	add	r31, r0
    116c:	b1 1d       	adc	r27, r1
    116e:	aa 1f       	adc	r26, r26
    1170:	64 9f       	mul	r22, r20
    1172:	66 27       	eor	r22, r22
    1174:	b0 0d       	add	r27, r0
    1176:	a1 1d       	adc	r26, r1
    1178:	66 1f       	adc	r22, r22
    117a:	82 9f       	mul	r24, r18
    117c:	22 27       	eor	r18, r18
    117e:	b0 0d       	add	r27, r0
    1180:	a1 1d       	adc	r26, r1
    1182:	62 1f       	adc	r22, r18
    1184:	73 9f       	mul	r23, r19
    1186:	b0 0d       	add	r27, r0
    1188:	a1 1d       	adc	r26, r1
    118a:	62 1f       	adc	r22, r18
    118c:	83 9f       	mul	r24, r19
    118e:	a0 0d       	add	r26, r0
    1190:	61 1d       	adc	r22, r1
    1192:	22 1f       	adc	r18, r18
    1194:	74 9f       	mul	r23, r20
    1196:	33 27       	eor	r19, r19
    1198:	a0 0d       	add	r26, r0
    119a:	61 1d       	adc	r22, r1
    119c:	23 1f       	adc	r18, r19
    119e:	84 9f       	mul	r24, r20
    11a0:	60 0d       	add	r22, r0
    11a2:	21 1d       	adc	r18, r1
    11a4:	82 2f       	mov	r24, r18
    11a6:	76 2f       	mov	r23, r22
    11a8:	6a 2f       	mov	r22, r26
    11aa:	11 24       	eor	r1, r1
    11ac:	9f 57       	subi	r25, 0x7F	; 127
    11ae:	50 40       	sbci	r21, 0x00	; 0
    11b0:	8a f0       	brmi	.+34     	; 0x11d4 <__mulsf3_pse+0x84>
    11b2:	e1 f0       	breq	.+56     	; 0x11ec <__mulsf3_pse+0x9c>
    11b4:	88 23       	and	r24, r24
    11b6:	4a f0       	brmi	.+18     	; 0x11ca <__mulsf3_pse+0x7a>
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	bb 1f       	adc	r27, r27
    11be:	66 1f       	adc	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	88 1f       	adc	r24, r24
    11c4:	91 50       	subi	r25, 0x01	; 1
    11c6:	50 40       	sbci	r21, 0x00	; 0
    11c8:	a9 f7       	brne	.-22     	; 0x11b4 <__mulsf3_pse+0x64>
    11ca:	9e 3f       	cpi	r25, 0xFE	; 254
    11cc:	51 05       	cpc	r21, r1
    11ce:	70 f0       	brcs	.+28     	; 0x11ec <__mulsf3_pse+0x9c>
    11d0:	5c cf       	rjmp	.-328    	; 0x108a <__fp_inf>
    11d2:	a6 cf       	rjmp	.-180    	; 0x1120 <__fp_szero>
    11d4:	5f 3f       	cpi	r21, 0xFF	; 255
    11d6:	ec f3       	brlt	.-6      	; 0x11d2 <__mulsf3_pse+0x82>
    11d8:	98 3e       	cpi	r25, 0xE8	; 232
    11da:	dc f3       	brlt	.-10     	; 0x11d2 <__mulsf3_pse+0x82>
    11dc:	86 95       	lsr	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	b7 95       	ror	r27
    11e4:	f7 95       	ror	r31
    11e6:	e7 95       	ror	r30
    11e8:	9f 5f       	subi	r25, 0xFF	; 255
    11ea:	c1 f7       	brne	.-16     	; 0x11dc <__mulsf3_pse+0x8c>
    11ec:	fe 2b       	or	r31, r30
    11ee:	88 0f       	add	r24, r24
    11f0:	91 1d       	adc	r25, r1
    11f2:	96 95       	lsr	r25
    11f4:	87 95       	ror	r24
    11f6:	97 f9       	bld	r25, 7
    11f8:	08 95       	ret

000011fa <_exit>:
    11fa:	f8 94       	cli

000011fc <__stop_program>:
    11fc:	ff cf       	rjmp	.-2      	; 0x11fc <__stop_program>
